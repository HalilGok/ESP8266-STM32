/*
 * esp8266.c
 *
 *  Created on: 11 Şub 2021
 *      Author: tolga
 */


#include "esp8266.h"
//#include <string.h>
//#include "stdio.h"
#include "string.h"


#define ESP8266BUFFER_LENGHT 500


char pc_rx_buffer[ESP8266BUFFER_LENGHT]={0};
char wifi_rx_buffer[ESP8266BUFFER_LENGHT]={0};

uint8_t tx_gecici_ortak_buffer=0;
char  tx_gecici_ortak_buffer55[100]={0};

uint8_t server_flag=0;

uint8_t k_counter=0;
uint16_t wifi_buffer_counter=0;
uint8_t i=0;
uint8_t len=0;

char rx_buffer11[500],tx_buffer11[150];
uint8_t esp_run=0;
uint8_t server_case =0;

int length;

/* mqtt */
uint16_t ProtocolNameLength;
uint16_t ClientIDLength;

uint8_t connect = 0x10,publishCon = 0x30,subscribeCon = 0x82;
char *protocolName = "MQTT";
uint8_t level = 0x04;
uint8_t flag = 0x02;   // 02--> sifresiz
uint16_t keepAlive =60;
uint16_t packetID = 0x01;
uint8_t Qos = 0x00;
//char *clientID = "Topuz";
char *clientID = "tolga";


uint8_t ESPEventCase3=0;


//void Subscribe(char *topic)
//{
//	uint8_t server_send_flag=0;
//   char tx_buffer22[200]={0};
//
//	uint16_t TopicLength = strlen(topic);
//	uint8_t RemainLength = 2+2+TopicLength+1; // packetIDlength(2) + topiclengthdata(2)+topiclength+Qos
//	uint16_t length = sprintf(tx_buffer11,"%c%c%c%c%c%c%s%c",(char)subscribeCon,(char)RemainLength,(char)(packetID << 8),(char)packetID,(char)(TopicLength << 8),(char)TopicLength,topic,(char)Qos);
//
//	while (server_send_flag==0)//CIPSEND boyut
//	{
//		sprintf(tx_buffer22,"AT+CIPSEND=%d\r\n",length);
//		USART_puts(tx_buffer22, wifi_uart);
//		HAL_Delay(100);
////		if (strstr(wifi_rx_buffer,">") != NULL)
////		{
//			server_send_flag = 1;
////		}
//		Clear_ESPBuffer();
//	}
//	while (server_send_flag==1) //cipsend veri
//	{
//		USART_puts (tx_buffer11, wifi_uart);
//		HAL_Delay(100);
////		if (strstr(wifi_rx_buffer,"SEND OK") != NULL)
////		{
//			server_send_flag = 2;
////		}
//		Clear_ESPBuffer();
//	}
//	HAL_Delay(100);
//}
//void publish(char *topic, char *message)
//{
//	uint8_t server_send_flag=0;
//	char tx_buffer22[200]={0};
//
//	uint16_t topiclength = strlen(topic);
//	uint8_t remainlength = 2+topiclength+strlen(message);
//	int length = sprintf(tx_buffer11,"%c%c%c%c%s%s",(char)publishCon,(char)remainlength,(char)(topiclength << 8),(char)topiclength,topic,message);
//
//	while (server_send_flag==0)//CIPSEND boyut
//		{
//			sprintf(tx_buffer22,"AT+CIPSEND=%d\r\n",length);
//			USART_puts(tx_buffer22, wifi_uart);
//			HAL_Delay(100);
////			if (strstr(wifi_rx_buffer,">") != NULL)
////			{
//				server_send_flag = 1;
////			}
//			Clear_ESPBuffer();
//		}
//		while (server_send_flag==1) //cipsend veri
//		{
//			USART_puts (tx_buffer11, wifi_uart);
//			HAL_Delay(100);
////			if (strstr(wifi_rx_buffer,"SEND OK") != NULL)
////			{
//				server_send_flag = 2;
////			}
//			Clear_ESPBuffer();
//		}
//	HAL_Delay(100);
//}
void ESP8266_Init(char *ag_adi,char *parola)
{
//	uint8_t ESPEventCase3=0;
//	uint8_t say2=0;

//			USART_puts("AT+RST\r\n", wifi_uart);
//			HAL_Delay(1000);
//			USART_puts("RESETTING.", pc_uart);
//			for (int i=0; i<5; i++)
//			{
//				USART_puts(".", pc_uart);
//				HAL_Delay(1000);
//			}

	while(ESPEventCase3==0)/*********  AT **********/
	{
		USART_puts("AT\r\n",wifi_uart);
		HAL_Delay(1000);
		USART_puts("\nAT atildi\r\n",pc_uart);
		HAL_Delay(1000);

		if (strstr(wifi_rx_buffer,"OK") != NULL)
		{

			USART_puts("Module Erisildi\n",pc_uart);
			ESPEventCase3 = 1;

		}
		else
		{
			USART_puts("Modul Bulunamadi, Tekrar Deneniyor\n",pc_uart);
			//ESPEventCase =0 ;
		}
		Clear_ESPBuffer();
	}
	while(ESPEventCase3==1) /********* AT+CWMODE=1 **********/
	{
		USART_puts("AT+CWMODE?\r\n",wifi_uart);//hangi modda diye sorduk	                                         // 1 saniye gecikme koyuyoruz.
		HAL_Delay(2000);

		if (strstr(wifi_rx_buffer,"+CWMODE:1") != NULL)
		{

			USART_puts("MODE Ayar Dogru\n",pc_uart); //1 'se application modda old. öğrendik
			ESPEventCase3=2;
		}
		else
		{
			// Fabrika ayarlari olarak 2 geliyor biz onu 1 yapip reset komutu ile tamamlariz.
			USART_puts("AT+CWMODE=1\r\n",wifi_uart);
			HAL_Delay(1000);
			USART_puts("MOD Degistirildi.\n",pc_uart);
			ESPEventCase3 = 2;
		}
		//ESPEventCase=2;
		Clear_ESPBuffer();
	}
	while(ESPEventCase3==2) /********* AT+CWQAP= **********///Şayet modül bir ağa bağlı ise o ağdan ayrılır.
	{

		USART_puts("AT+CWQAP\r\n",wifi_uart);
		HAL_Delay(1000);
		ESPEventCase3=3;
		Clear_ESPBuffer();
	}

	while(ESPEventCase3==3) /********* AT+CWJAP="SSID","PASSWD" **********/
	{
		sprintf(tx_buffer11, "AT+CWJAP=\"%s\",\"%s\"\r\n", ag_adi, parola);
		USART_puts(tx_buffer11, wifi_uart);
		HAL_Delay(2000);

		if (strstr(wifi_rx_buffer,"OK") != NULL)
		{
			USART_puts("Modeme Baglanti yapildi\n",pc_uart);
			ESPEventCase3 = 4;

		}
		else
		{
			USART_puts("Modeme Baglanti Bekleniyor\n",pc_uart);
			HAL_Delay(2000);
			//ESPEventCase=1;
			//	Clear_ESPBuffer();
		}
		//Clear_ESPBuffer();

	}
}
//void Connect_Broker(char *Ip ,char *Port)
//{
//	uint8_t ESPEventCase7=0;
//	//uint8_t tx_buffer11=0;
//	while (ESPEventCase7==0) /********** AT+CIPCLOSE **********/
//	{
//		sprintf (tx_buffer11,"AT+CIPCLOSE\r\n");//herhangi bir servera bağlı isek bağlantıyı kaparız
//		//bağlantı yoksa eror döndürür.
//		USART_puts(tx_buffer11,wifi_uart);
//		HAL_Delay(500);
//		//if (strstr(wifi_rx_buffer,"OK\r\n") != NULL)
//		//{
//			ESPEventCase7 = 1;
//	//	}
//		Clear_ESPBuffer();
//	}
//	while(ESPEventCase7==1)/********* AT+CIPMUX=0 **********/// 0=tekil bağ,1=çoğ bağlantı
//	{
//		USART_puts("AT+CIPMUX=0\r\n",wifi_uart);
//		HAL_Delay(1000);
//		if (strstr(wifi_rx_buffer,"OK") != NULL)
//		{
//			USART_puts("Tekil Baglanti yapildi\n",pc_uart);
//			ESPEventCase7 = 2;
//			Clear_ESPBuffer();
//		}
//		else
//		{
//			USART_puts("Tekil baglanti yapilamadi\n",pc_uart);
//			HAL_Delay(2000);
//			//				ESPEventCase=;
//			//	Clear_ESPBuffer();
//		}
//		Clear_ESPBuffer();
//	}
//	while(ESPEventCase7==2)/********* AT+CIFSR **********/
//	{                             // IP adresi nedir diye soruyoruz ?
//		USART_puts("AT+CIFSR\r\n",wifi_uart);
//		HAL_Delay(1000);
//
//		// IP alana kadar error bilgisi gonderir. Onu ayiririz. =)
//		if (strstr(wifi_rx_buffer,"ERROR") == NULL)// error varsa null dönmez ife girmez elseye girer
//			//"else"de wifi_rx_buffer temizlenir.error gelmeyene kadar   elseye gider.
//		{
//			USART_puts("Alinan IP = \n",pc_uart); // Gelen bilginin 11.karakterinden itibaren IP adresi yaziyor.
//			USART_puts(&wifi_rx_buffer[11],pc_uart);
//			ESPEventCase7=3;
//		}
//		else
//		{  // ERROR der ise tekrar dene
//			HAL_Delay(1000);
//			USART_puts("Tekrar Dene.\n",pc_uart);
//
//		}
//		Clear_ESPBuffer();
//	}
//	while(ESPEventCase7==2)/********* AT+CIPSTART **********/
//	{
//		sprintf(tx_buffer11,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n",Ip,Port);
//		USART_puts(tx_buffer11,wifi_uart);
//		HAL_Delay(5000);
//		USART_puts("TCP Baglanti istegi gonderildi\n\n", pc_uart);
//		HAL_Delay(200);
//		if (strstr(wifi_rx_buffer,"OK") != NULL)//veya connect yazılabilir
//		{
//
//			USART_puts("Site ile baglanti kuruldu\n\n", pc_uart);
//			HAL_Delay(500);
//			ESPEventCase7 = 3;
//			//			Clear_ESPBuffer();
//		}
//		else
//		{
//			USART_puts("Site baglantisi olmadi.Tekrar Dene.\n",pc_uart);
//			HAL_Delay(500);
//		}
//		Clear_ESPBuffer();
//	}
//
//	HAL_Delay(1000);
//
//
//	//connect packet
//	Connect_Packet();
//
//
//}
//void Connect_Packet(void)
//{
//	uint8_t server_send_flag=0;
//	ProtocolNameLength = strlen(protocolName);
//	ClientIDLength     = strlen(clientID);
//	char tx_bufffer22[200]={0};
//	uint8_t Remainlength;
//	Remainlength = 2+ProtocolNameLength+6+ClientIDLength;
//	//int len = strlen (str);
//	uint16_t length = sprintf(tx_buffer11,"%c%c%c%c%s%c%c%c%c%c%c%s",(char)connect,(char)Remainlength,(char)(ProtocolNameLength << 8),(char)ProtocolNameLength,protocolName,(char)level,(char)flag,(char)(keepAlive << 8),(char)keepAlive,(char)(ClientIDLength << 8),(char)ClientIDLength,clientID);
//	// sprintf(tx_buffer11,"%c%c%c%c%s%c%c%c%c%c%c%s",(char)connect,(char)Remainlength,(char)(ProtocolNameLength << 8),(char)ProtocolNameLength,protocolName,(char)level,(char)flag,(char)(keepAlive << 8),(char)keepAlive,(char)(ClientIDLength << 8),(char)ClientIDLength,clientID);
//	// uint16_t length = strlen(tx_buffer11);
//	sprintf(tx_bufffer22,"AT+CIPSEND=%d\r\n",length);
//
//	while (server_send_flag==0)//CIPSEND
//	{
//		USART_puts(tx_bufffer22, wifi_uart);
//		HAL_Delay(500);
//		//if (strstr(wifi_rx_buffer,">") != NULL)
//	//	{
//			server_send_flag = 1;
//	//	}
//		Clear_ESPBuffer();
//	}
//	while (server_send_flag==1)
//	{
//		//sprintf(tx_buffer11,"%c%c%c%c%s%c%c%c%c%c%c%s",(char)connect,(char)Remainlength,(char)(ProtocolNameLength << 8),(char)ProtocolNameLength,protocolName,(char)level,(char)flag,(char)(keepAlive << 8),(char)keepAlive,(char)(ClientIDLength << 8),(char)ClientIDLength,clientID);
//
//		USART_puts (tx_buffer11, wifi_uart);
//		HAL_Delay(500);
//		//if (strstr(wifi_rx_buffer,"SEND OK") != NULL)
//	//	{
//			server_send_flag = 2;
//		//}
//		Clear_ESPBuffer();
//	}
//}
void bufclr (char *buf)
{
	int len = strlen (buf);
	for (int i=0; i<len; i++) buf[i] = '\0';
}

void Clear_TC_Flag(void)
{
//		__HAL_UART_CLEAR_FLAG(pc_uart,UART_FLAG_TC);
//		__HAL_UART_CLEAR_FLAG(wifi_uart,UART_FLAG_TC);
}
void Clear_ESPBuffer(void)
{
	for(uint16_t clean_counter=0;clean_counter<ESP8266BUFFER_LENGHT;clean_counter++)
	{
		wifi_rx_buffer[clean_counter]=0;
		tx_buffer11[clean_counter]=0;

	}
	wifi_buffer_counter=0;
}

void USART_puts(const char *s, UART_HandleTypeDef *uart)
{
	while(*s!='\0')
	{
		Uart_write_kod(*s++, uart);

	}
}

void Uart_write_kod(int c, UART_HandleTypeDef *uart)
{
//	if(wifi_buffer_counter != 0)
//	{
//		wifi_buffer_counter=0;
//	}
	tx_gecici_ortak_buffer=c;
	if(wifi_uart== uart)
	{
		HAL_UART_Transmit(wifi_uart,&tx_gecici_ortak_buffer,1,10);

	}
	else if(pc_uart== uart)
	{
		HAL_UART_Transmit(pc_uart,&tx_gecici_ortak_buffer,1,10);

	}
}
void Uart_isr (UART_HandleTypeDef *uart)
{

	if(wifi_uart== uart)
	{

			HAL_UART_Receive(wifi_uart,(uint8_t*)&wifi_rx_buffer[wifi_buffer_counter],1,10);
			wifi_buffer_counter++;
	}
	else if(pc_uart== uart)
	{
			HAL_UART_Receive(pc_uart,(uint8_t*)&pc_rx_buffer[k_counter],1,100);
//			pc_rx_buffer[k_counter]=USART2->DR;
			k_counter++;
	}
}

