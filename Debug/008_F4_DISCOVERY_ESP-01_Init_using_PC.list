
008_F4_DISCOVERY_ESP-01_Init_using_PC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d10  08003d10  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08003d10  08003d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d18  08003d18  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08003d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d74  200000a0  08003dc0  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e14  08003dc0  00020e14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000876f  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f5  00000000  00000000  0002883f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002a038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202b2  00000000  00000000  0002ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c1f  00000000  00000000  0004b0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c29fe  00000000  00000000  00053cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001166cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002048  00000000  00000000  00116724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a30 	.word	0x08003a30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08003a30 	.word	0x08003a30

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fece 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f860 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f91c 	bl	80007e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f8c6 	bl	8000738 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005ac:	f000 f8ee 	bl	800078c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	/*incoming data is read piecemeal. */
	HAL_UART_Receive_IT(&huart2, &byte_pc, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	491f      	ldr	r1, [pc, #124]	; (8000630 <main+0x98>)
 80005b4:	481f      	ldr	r0, [pc, #124]	; (8000634 <main+0x9c>)
 80005b6:	f001 ffbe 	bl	8002536 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &byte_esp, 1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	491e      	ldr	r1, [pc, #120]	; (8000638 <main+0xa0>)
 80005be:	481f      	ldr	r0, [pc, #124]	; (800063c <main+0xa4>)
 80005c0:	f001 ffb9 	bl	8002536 <HAL_UART_Receive_IT>
	 printf_PC("Program is starting..\n");
 80005c4:	481e      	ldr	r0, [pc, #120]	; (8000640 <main+0xa8>)
 80005c6:	f000 fc7d 	bl	8000ec4 <printf_PC>
	test_AT();
 80005ca:	f000 f965 	bl	8000898 <test_AT>
	HAL_Delay(2000);
 80005ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d2:	f000 ff25 	bl	8001420 <HAL_Delay>
	printf_PC("Please wait...\n");
 80005d6:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xac>)
 80005d8:	f000 fc74 	bl	8000ec4 <printf_PC>
	ESP_Init(WiFi_Name,Wifi_Password);
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <main+0xb0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1a      	ldr	r2, [pc, #104]	; (800064c <main+0xb4>)
 80005e2:	6812      	ldr	r2, [r2, #0]
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f930 	bl	800084c <ESP_Init>
	HAL_Delay(5000);
 80005ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80005f0:	f000 ff16 	bl	8001420 <HAL_Delay>
	 // Connect_Broker("192.168.31.203","1883");
    Connect_Secure_Broker(IP,Port,User_Name,User_Password);
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <main+0xb8>)
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <main+0xbc>)
 80005fa:	6819      	ldr	r1, [r3, #0]
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <main+0xc0>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <main+0xc4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f000 f986 	bl	8000914 <Connect_Secure_Broker>
	HAL_Delay(2000);
 8000608:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800060c:	f000 ff08 	bl	8001420 <HAL_Delay>
	Subscribe_MQTT(TOPIC);
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <main+0xc8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 faa7 	bl	8000b68 <Subscribe_MQTT>
	HAL_Delay(2000);
 800061a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800061e:	f000 feff 	bl	8001420 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Read_Message_MQTT();
 8000622:	f000 fb89 	bl	8000d38 <Read_Message_MQTT>
		//test_PC_to_ESP();
		HAL_Delay(100);
 8000626:	2064      	movs	r0, #100	; 0x64
 8000628:	f000 fefa 	bl	8001420 <HAL_Delay>
		Read_Message_MQTT();
 800062c:	e7f9      	b.n	8000622 <main+0x8a>
 800062e:	bf00      	nop
 8000630:	20000d7e 	.word	0x20000d7e
 8000634:	20000d38 	.word	0x20000d38
 8000638:	20000a44 	.word	0x20000a44
 800063c:	20000130 	.word	0x20000130
 8000640:	08003a64 	.word	0x08003a64
 8000644:	08003a7c 	.word	0x08003a7c
 8000648:	20000000 	.word	0x20000000
 800064c:	20000004 	.word	0x20000004
 8000650:	2000000c 	.word	0x2000000c
 8000654:	20000008 	.word	0x20000008
 8000658:	20000010 	.word	0x20000010
 800065c:	20000014 	.word	0x20000014
 8000660:	20000018 	.word	0x20000018

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fd9e 	bl	80031b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a27      	ldr	r2, [pc, #156]	; (8000730 <SystemClock_Config+0xcc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xd0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d4:	2308      	movs	r3, #8
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d8:	23a8      	movs	r3, #168	; 0xa8
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 f9fd 	bl	8001ae8 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 fcb6 	bl	8001064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000704:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2105      	movs	r1, #5
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fc5e 	bl	8001fd8 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000722:	f000 fc9f 	bl	8001064 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART2_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000770:	f001 fe02 	bl	8002378 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 fc73 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000d38 	.word	0x20000d38
 8000788:	40004400 	.word	0x40004400

0800078c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART3_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART3_UART_Init+0x4c>)
 80007c4:	f001 fdd8 	bl	8002378 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 fc49 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000130 	.word	0x20000130
 80007dc:	40004800 	.word	0x40004800

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_GPIO_Init+0x68>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <MX_GPIO_Init+0x68>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_GPIO_Init+0x68>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_GPIO_Init+0x68>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <MX_GPIO_Init+0x68>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_GPIO_Init+0x68>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_GPIO_Init+0x68>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <MX_GPIO_Init+0x68>)
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_GPIO_Init+0x68>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <ESP_Init>:

/* USER CODE BEGIN 4 */
/*ESP_Init(char *SSID,char *PASSWORD): this function should be called after testing.
 *  ESP_Init() can be called If hardware and software problems are not encountered.*/
void ESP_Init(const char *SSID,const char *PASSWORD) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	printf_Esp("AT+CWMODE=1\r\n");  // STA mode on
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <ESP_Init+0x38>)
 8000858:	f000 fb74 	bl	8000f44 <printf_Esp>
	printf_Esp("AT+CWQAP\r\n"); //closes earlier networks
 800085c:	480a      	ldr	r0, [pc, #40]	; (8000888 <ESP_Init+0x3c>)
 800085e:	f000 fb71 	bl	8000f44 <printf_Esp>
	//printf_Esp("AT+RST\n\r");  // RESET

	sprintf((char*)esp_tx_buffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWORD);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4909      	ldr	r1, [pc, #36]	; (800088c <ESP_Init+0x40>)
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <ESP_Init+0x44>)
 800086a:	f002 fcab 	bl	80031c4 <siprintf>
	printf_Esp((char*) esp_tx_buffer);
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <ESP_Init+0x44>)
 8000870:	f000 fb68 	bl	8000f44 <printf_Esp>
    printf_PC("network connected..\n");
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <ESP_Init+0x48>)
 8000876:	f000 fb25 	bl	8000ec4 <printf_PC>

}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08003a8c 	.word	0x08003a8c
 8000888:	08003a9c 	.word	0x08003a9c
 800088c:	08003aa8 	.word	0x08003aa8
 8000890:	200000cc 	.word	0x200000cc
 8000894:	08003ac0 	.word	0x08003ac0

08000898 <test_AT>:


void test_AT(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	//it is a test function that confirms that esp communicates hardware with the pc.
	//UART3 -> ESP UART2 -> PC
	printf_PC("***** ESP8266-01 Test Software *****\n");
 800089c:	4816      	ldr	r0, [pc, #88]	; (80008f8 <test_AT+0x60>)
 800089e:	f000 fb11 	bl	8000ec4 <printf_PC>
	printf_PC("** It can't be learned without making mistakes. **\n");
 80008a2:	4816      	ldr	r0, [pc, #88]	; (80008fc <test_AT+0x64>)
 80008a4:	f000 fb0e 	bl	8000ec4 <printf_PC>

	printf_Esp("AT\r\n");   // At command sent to ESP
 80008a8:	4815      	ldr	r0, [pc, #84]	; (8000900 <test_AT+0x68>)
 80008aa:	f000 fb4b 	bl	8000f44 <printf_Esp>
	HAL_Delay(50);
 80008ae:	2032      	movs	r0, #50	; 0x32
 80008b0:	f000 fdb6 	bl	8001420 <HAL_Delay>
	strcpy((char*)old_pc_rx_buffer, (char*)esp_rx_buffer); // to back up esp's response
 80008b4:	4913      	ldr	r1, [pc, #76]	; (8000904 <test_AT+0x6c>)
 80008b6:	4814      	ldr	r0, [pc, #80]	; (8000908 <test_AT+0x70>)
 80008b8:	f002 fca4 	bl	8003204 <strcpy>
	printf_PC("\nAT commend sent. Response =\n "); //
 80008bc:	4813      	ldr	r0, [pc, #76]	; (800090c <test_AT+0x74>)
 80008be:	f000 fb01 	bl	8000ec4 <printf_PC>
	HAL_Delay(50);
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f000 fdac 	bl	8001420 <HAL_Delay>
	printf_PC((char*) old_pc_rx_buffer); //  the copied array (old_pc_rx_buffer) is sent to the PC.
 80008c8:	480f      	ldr	r0, [pc, #60]	; (8000908 <test_AT+0x70>)
 80008ca:	f000 fafb 	bl	8000ec4 <printf_PC>
	memset((char*)old_pc_rx_buffer, 0, sizeof(old_pc_rx_buffer)); //reset the array
 80008ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 80008d2:	2100      	movs	r1, #0
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <test_AT+0x70>)
 80008d6:	f002 fc6d 	bl	80031b4 <memset>
	memset((char*)pc_rx_buffer, 0, sizeof(pc_rx_buffer));         //***
 80008da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80008de:	2100      	movs	r1, #0
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <test_AT+0x78>)
 80008e2:	f002 fc67 	bl	80031b4 <memset>
	memset((char*)esp_rx_buffer, 0, sizeof(esp_rx_buffer));       //**
 80008e6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80008ea:	2100      	movs	r1, #0
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <test_AT+0x6c>)
 80008ee:	f002 fc61 	bl	80031b4 <memset>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08003ad8 	.word	0x08003ad8
 80008fc:	08003b00 	.word	0x08003b00
 8000900:	08003b34 	.word	0x08003b34
 8000904:	20000754 	.word	0x20000754
 8000908:	20000174 	.word	0x20000174
 800090c:	08003b3c 	.word	0x08003b3c
 8000910:	20000464 	.word	0x20000464

08000914 <Connect_Secure_Broker>:
	printf_PC("connected to the server..\n");

}

void Connect_Secure_Broker(const char *Ip,const char *Port, const char *userName,const char *password)
{
 8000914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000916:	b09d      	sub	sp, #116	; 0x74
 8000918:	af10      	add	r7, sp, #64	; 0x40
 800091a:	61f8      	str	r0, [r7, #28]
 800091c:	61b9      	str	r1, [r7, #24]
 800091e:	617a      	str	r2, [r7, #20]
 8000920:	613b      	str	r3, [r7, #16]
	    uint16_t usernamelength;
		uint16_t passwordlength;
		uint8_t flag = 0xC2;
 8000922:	23c2      	movs	r3, #194	; 0xc2
 8000924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	       printf_Esp("AT+CIPCLOSE\r\n");
 8000928:	487f      	ldr	r0, [pc, #508]	; (8000b28 <Connect_Secure_Broker+0x214>)
 800092a:	f000 fb0b 	bl	8000f44 <printf_Esp>
		   HAL_Delay(250);
 800092e:	20fa      	movs	r0, #250	; 0xfa
 8000930:	f000 fd76 	bl	8001420 <HAL_Delay>
		   printf_Esp("AT+CIPMUX=0\r\n");
 8000934:	487d      	ldr	r0, [pc, #500]	; (8000b2c <Connect_Secure_Broker+0x218>)
 8000936:	f000 fb05 	bl	8000f44 <printf_Esp>
		   HAL_Delay(250);
 800093a:	20fa      	movs	r0, #250	; 0xfa
 800093c:	f000 fd70 	bl	8001420 <HAL_Delay>
		   printf_Esp("AT+CIFSR\r\n"); //**
 8000940:	487b      	ldr	r0, [pc, #492]	; (8000b30 <Connect_Secure_Broker+0x21c>)
 8000942:	f000 faff 	bl	8000f44 <printf_Esp>
		   HAL_Delay(250);
 8000946:	20fa      	movs	r0, #250	; 0xfa
 8000948:	f000 fd6a 	bl	8001420 <HAL_Delay>
		   sprintf((char*)esp_tx_buffer,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n",Ip,Port);
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	4978      	ldr	r1, [pc, #480]	; (8000b34 <Connect_Secure_Broker+0x220>)
 8000952:	4879      	ldr	r0, [pc, #484]	; (8000b38 <Connect_Secure_Broker+0x224>)
 8000954:	f002 fc36 	bl	80031c4 <siprintf>
		   HAL_UART_Transmit(&huart3,(uint8_t *)esp_tx_buffer,sprintf((char*)esp_tx_buffer,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n",Ip,Port),5000);
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	4975      	ldr	r1, [pc, #468]	; (8000b34 <Connect_Secure_Broker+0x220>)
 800095e:	4876      	ldr	r0, [pc, #472]	; (8000b38 <Connect_Secure_Broker+0x224>)
 8000960:	f002 fc30 	bl	80031c4 <siprintf>
 8000964:	4603      	mov	r3, r0
 8000966:	b29a      	uxth	r2, r3
 8000968:	f241 3388 	movw	r3, #5000	; 0x1388
 800096c:	4972      	ldr	r1, [pc, #456]	; (8000b38 <Connect_Secure_Broker+0x224>)
 800096e:	4873      	ldr	r0, [pc, #460]	; (8000b3c <Connect_Secure_Broker+0x228>)
 8000970:	f001 fd4f 	bl	8002412 <HAL_UART_Transmit>
		   HAL_Delay(2000);
 8000974:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000978:	f000 fd52 	bl	8001420 <HAL_Delay>

           //connect packet
		   ProtocolNameLength = strlen(protocolName);
 800097c:	4b70      	ldr	r3, [pc, #448]	; (8000b40 <Connect_Secure_Broker+0x22c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fc2f 	bl	80001e4 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b6e      	ldr	r3, [pc, #440]	; (8000b44 <Connect_Secure_Broker+0x230>)
 800098c:	801a      	strh	r2, [r3, #0]
		     ClientIDLength = strlen(clientID);
 800098e:	4b6e      	ldr	r3, [pc, #440]	; (8000b48 <Connect_Secure_Broker+0x234>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fc26 	bl	80001e4 <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b6b      	ldr	r3, [pc, #428]	; (8000b4c <Connect_Secure_Broker+0x238>)
 800099e:	801a      	strh	r2, [r3, #0]
		     usernamelength = strlen(userName);
 80009a0:	6978      	ldr	r0, [r7, #20]
 80009a2:	f7ff fc1f 	bl	80001e4 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		     passwordlength = strlen(password);
 80009aa:	6938      	ldr	r0, [r7, #16]
 80009ac:	f7ff fc1a 	bl	80001e4 <strlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	857b      	strh	r3, [r7, #42]	; 0x2a
		      uint8_t Remainlength;
		     	Remainlength = 2+ProtocolNameLength+6+ClientIDLength+2+usernamelength+2+passwordlength;
 80009b4:	4b63      	ldr	r3, [pc, #396]	; (8000b44 <Connect_Secure_Broker+0x230>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b64      	ldr	r3, [pc, #400]	; (8000b4c <Connect_Secure_Broker+0x238>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4413      	add	r3, r2
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4413      	add	r3, r2
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4413      	add	r3, r2
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	330c      	adds	r3, #12
 80009d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		     	uint16_t length = sprintf((char*)esp_tx_buffer,"%c%c%c%c%s%c%c%c%c%c%c%s%c%c%s%c%c%s",(char)connect,(char)Remainlength,(char)(ProtocolNameLength << 8),(char)ProtocolNameLength,protocolName,(char)level,(char)flag,(char)(keepAlive << 8),(char)keepAlive,(char)(ClientIDLength << 8),(char)ClientIDLength,clientID,(char)(usernamelength << 8),(char)usernamelength,userName,(char)(passwordlength << 8),(char)passwordlength,password);
 80009da:	4b5d      	ldr	r3, [pc, #372]	; (8000b50 <Connect_Secure_Broker+0x23c>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	469c      	mov	ip, r3
 80009e0:	f897 4029 	ldrb.w	r4, [r7, #41]	; 0x29
 80009e4:	4b57      	ldr	r3, [pc, #348]	; (8000b44 <Connect_Secure_Broker+0x230>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461d      	mov	r5, r3
 80009ec:	4b54      	ldr	r3, [pc, #336]	; (8000b40 <Connect_Secure_Broker+0x22c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a58      	ldr	r2, [pc, #352]	; (8000b54 <Connect_Secure_Broker+0x240>)
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	4616      	mov	r6, r2
 80009f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80009fa:	4957      	ldr	r1, [pc, #348]	; (8000b58 <Connect_Secure_Broker+0x244>)
 80009fc:	8809      	ldrh	r1, [r1, #0]
 80009fe:	b2c9      	uxtb	r1, r1
 8000a00:	60f9      	str	r1, [r7, #12]
 8000a02:	4952      	ldr	r1, [pc, #328]	; (8000b4c <Connect_Secure_Broker+0x238>)
 8000a04:	8809      	ldrh	r1, [r1, #0]
 8000a06:	b2c9      	uxtb	r1, r1
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	494f      	ldr	r1, [pc, #316]	; (8000b48 <Connect_Secure_Broker+0x234>)
 8000a0c:	6809      	ldr	r1, [r1, #0]
 8000a0e:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8000a10:	b2c0      	uxtb	r0, r0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8000a16:	b2c0      	uxtb	r0, r0
 8000a18:	6038      	str	r0, [r7, #0]
 8000a1a:	6938      	ldr	r0, [r7, #16]
 8000a1c:	900f      	str	r0, [sp, #60]	; 0x3c
 8000a1e:	6838      	ldr	r0, [r7, #0]
 8000a20:	900e      	str	r0, [sp, #56]	; 0x38
 8000a22:	2000      	movs	r0, #0
 8000a24:	900d      	str	r0, [sp, #52]	; 0x34
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	900c      	str	r0, [sp, #48]	; 0x30
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8000a2e:	2000      	movs	r0, #0
 8000a30:	900a      	str	r0, [sp, #40]	; 0x28
 8000a32:	9109      	str	r1, [sp, #36]	; 0x24
 8000a34:	68b8      	ldr	r0, [r7, #8]
 8000a36:	9008      	str	r0, [sp, #32]
 8000a38:	2100      	movs	r1, #0
 8000a3a:	9107      	str	r1, [sp, #28]
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	9106      	str	r1, [sp, #24]
 8000a40:	2100      	movs	r1, #0
 8000a42:	9105      	str	r1, [sp, #20]
 8000a44:	9204      	str	r2, [sp, #16]
 8000a46:	9603      	str	r6, [sp, #12]
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	9501      	str	r5, [sp, #4]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	4623      	mov	r3, r4
 8000a52:	4662      	mov	r2, ip
 8000a54:	4941      	ldr	r1, [pc, #260]	; (8000b5c <Connect_Secure_Broker+0x248>)
 8000a56:	4838      	ldr	r0, [pc, #224]	; (8000b38 <Connect_Secure_Broker+0x224>)
 8000a58:	f002 fbb4 	bl	80031c4 <siprintf>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	84fb      	strh	r3, [r7, #38]	; 0x26

		     	HAL_UART_Transmit(&huart3,(uint8_t *)esp_tx_buffer,sprintf((char*)esp_tx_buffer,"AT+CIPSEND=%d\r\n",length),1000);
 8000a60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a62:	461a      	mov	r2, r3
 8000a64:	493e      	ldr	r1, [pc, #248]	; (8000b60 <Connect_Secure_Broker+0x24c>)
 8000a66:	4834      	ldr	r0, [pc, #208]	; (8000b38 <Connect_Secure_Broker+0x224>)
 8000a68:	f002 fbac 	bl	80031c4 <siprintf>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a74:	4930      	ldr	r1, [pc, #192]	; (8000b38 <Connect_Secure_Broker+0x224>)
 8000a76:	4831      	ldr	r0, [pc, #196]	; (8000b3c <Connect_Secure_Broker+0x228>)
 8000a78:	f001 fccb 	bl	8002412 <HAL_UART_Transmit>
		     	HAL_Delay(250);
 8000a7c:	20fa      	movs	r0, #250	; 0xfa
 8000a7e:	f000 fccf 	bl	8001420 <HAL_Delay>
		     	HAL_UART_Transmit(&huart3,(uint8_t *)esp_tx_buffer,sprintf((char*)esp_tx_buffer,"%c%c%c%c%s%c%c%c%c%c%c%s%c%c%s%c%c%s",(char)connect,(char)Remainlength,(char)(ProtocolNameLength << 8),(char)ProtocolNameLength,protocolName,(char)level,(char)flag,(char)(keepAlive << 8),(char)keepAlive,(char)(ClientIDLength << 8),(char)ClientIDLength,clientID,(char)(usernamelength << 8),(char)usernamelength,userName,(char)(passwordlength << 8),(char)passwordlength,password),5000);
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <Connect_Secure_Broker+0x23c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	469c      	mov	ip, r3
 8000a88:	f897 4029 	ldrb.w	r4, [r7, #41]	; 0x29
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <Connect_Secure_Broker+0x230>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461d      	mov	r5, r3
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <Connect_Secure_Broker+0x22c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a2e      	ldr	r2, [pc, #184]	; (8000b54 <Connect_Secure_Broker+0x240>)
 8000a9a:	7812      	ldrb	r2, [r2, #0]
 8000a9c:	4616      	mov	r6, r2
 8000a9e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000aa2:	492d      	ldr	r1, [pc, #180]	; (8000b58 <Connect_Secure_Broker+0x244>)
 8000aa4:	8809      	ldrh	r1, [r1, #0]
 8000aa6:	b2c9      	uxtb	r1, r1
 8000aa8:	60f9      	str	r1, [r7, #12]
 8000aaa:	4928      	ldr	r1, [pc, #160]	; (8000b4c <Connect_Secure_Broker+0x238>)
 8000aac:	8809      	ldrh	r1, [r1, #0]
 8000aae:	b2c9      	uxtb	r1, r1
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	4925      	ldr	r1, [pc, #148]	; (8000b48 <Connect_Secure_Broker+0x234>)
 8000ab4:	6809      	ldr	r1, [r1, #0]
 8000ab6:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8000ab8:	b2c0      	uxtb	r0, r0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8000abe:	b2c0      	uxtb	r0, r0
 8000ac0:	6038      	str	r0, [r7, #0]
 8000ac2:	6938      	ldr	r0, [r7, #16]
 8000ac4:	900f      	str	r0, [sp, #60]	; 0x3c
 8000ac6:	6838      	ldr	r0, [r7, #0]
 8000ac8:	900e      	str	r0, [sp, #56]	; 0x38
 8000aca:	2000      	movs	r0, #0
 8000acc:	900d      	str	r0, [sp, #52]	; 0x34
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	900c      	str	r0, [sp, #48]	; 0x30
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	900b      	str	r0, [sp, #44]	; 0x2c
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	900a      	str	r0, [sp, #40]	; 0x28
 8000ada:	9109      	str	r1, [sp, #36]	; 0x24
 8000adc:	68b8      	ldr	r0, [r7, #8]
 8000ade:	9008      	str	r0, [sp, #32]
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	9107      	str	r1, [sp, #28]
 8000ae4:	68f9      	ldr	r1, [r7, #12]
 8000ae6:	9106      	str	r1, [sp, #24]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	9105      	str	r1, [sp, #20]
 8000aec:	9204      	str	r2, [sp, #16]
 8000aee:	9603      	str	r6, [sp, #12]
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	9501      	str	r5, [sp, #4]
 8000af4:	2300      	movs	r3, #0
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	4623      	mov	r3, r4
 8000afa:	4662      	mov	r2, ip
 8000afc:	4917      	ldr	r1, [pc, #92]	; (8000b5c <Connect_Secure_Broker+0x248>)
 8000afe:	480e      	ldr	r0, [pc, #56]	; (8000b38 <Connect_Secure_Broker+0x224>)
 8000b00:	f002 fb60 	bl	80031c4 <siprintf>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b0c:	490a      	ldr	r1, [pc, #40]	; (8000b38 <Connect_Secure_Broker+0x224>)
 8000b0e:	480b      	ldr	r0, [pc, #44]	; (8000b3c <Connect_Secure_Broker+0x228>)
 8000b10:	f001 fc7f 	bl	8002412 <HAL_UART_Transmit>
		      HAL_Delay(250);
 8000b14:	20fa      	movs	r0, #250	; 0xfa
 8000b16:	f000 fc83 	bl	8001420 <HAL_Delay>
             printf_PC("connected to the server..\n");
 8000b1a:	4812      	ldr	r0, [pc, #72]	; (8000b64 <Connect_Secure_Broker+0x250>)
 8000b1c:	f000 f9d2 	bl	8000ec4 <printf_PC>
}
 8000b20:	bf00      	nop
 8000b22:	3734      	adds	r7, #52	; 0x34
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b28:	08003b5c 	.word	0x08003b5c
 8000b2c:	08003b6c 	.word	0x08003b6c
 8000b30:	08003b7c 	.word	0x08003b7c
 8000b34:	08003b88 	.word	0x08003b88
 8000b38:	200000cc 	.word	0x200000cc
 8000b3c:	20000130 	.word	0x20000130
 8000b40:	20000020 	.word	0x20000020
 8000b44:	20000a42 	.word	0x20000a42
 8000b48:	20000024 	.word	0x20000024
 8000b4c:	20000d7c 	.word	0x20000d7c
 8000b50:	2000001c 	.word	0x2000001c
 8000b54:	20000028 	.word	0x20000028
 8000b58:	2000002a 	.word	0x2000002a
 8000b5c:	08003bec 	.word	0x08003bec
 8000b60:	08003bc0 	.word	0x08003bc0
 8000b64:	08003bd0 	.word	0x08003bd0

08000b68 <Subscribe_MQTT>:

void Subscribe_MQTT(const char *topic)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b08b      	sub	sp, #44	; 0x2c
 8000b6c:	af06      	add	r7, sp, #24
 8000b6e:	6078      	str	r0, [r7, #4]
	uint16_t TopicLength = strlen(topic);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fb37 	bl	80001e4 <strlen>
 8000b76:	4603      	mov	r3, r0
 8000b78:	81fb      	strh	r3, [r7, #14]
	uint8_t RemainLength = 2+2+TopicLength+1; // packetIDlength(2) + topiclengthdata(2)+topiclength+Qos
 8000b7a:	89fb      	ldrh	r3, [r7, #14]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	3305      	adds	r3, #5
 8000b80:	737b      	strb	r3, [r7, #13]
	uint16_t length = sprintf((char*)esp_tx_buffer,"%c%c%c%c%c%c%s%c",(char)subscribeCon,(char)RemainLength,(char)(packetID << 8),(char)packetID,(char)(TopicLength << 8),(char)TopicLength,topic,(char)Qos);
 8000b82:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <Subscribe_MQTT+0xe0>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461c      	mov	r4, r3
 8000b88:	7b7a      	ldrb	r2, [r7, #13]
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <Subscribe_MQTT+0xe4>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <Subscribe_MQTT+0xe8>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	9305      	str	r3, [sp, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	9304      	str	r3, [sp, #16]
 8000ba2:	9003      	str	r0, [sp, #12]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	9302      	str	r3, [sp, #8]
 8000ba8:	9101      	str	r1, [sp, #4]
 8000baa:	2300      	movs	r3, #0
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	4622      	mov	r2, r4
 8000bb2:	4928      	ldr	r1, [pc, #160]	; (8000c54 <Subscribe_MQTT+0xec>)
 8000bb4:	4828      	ldr	r0, [pc, #160]	; (8000c58 <Subscribe_MQTT+0xf0>)
 8000bb6:	f002 fb05 	bl	80031c4 <siprintf>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(&huart3,(uint8_t *)esp_tx_buffer,sprintf((char*)esp_tx_buffer,"AT+CIPSEND=%d\r\n",length),1000);
 8000bbe:	897b      	ldrh	r3, [r7, #10]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4926      	ldr	r1, [pc, #152]	; (8000c5c <Subscribe_MQTT+0xf4>)
 8000bc4:	4824      	ldr	r0, [pc, #144]	; (8000c58 <Subscribe_MQTT+0xf0>)
 8000bc6:	f002 fafd 	bl	80031c4 <siprintf>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	4921      	ldr	r1, [pc, #132]	; (8000c58 <Subscribe_MQTT+0xf0>)
 8000bd4:	4822      	ldr	r0, [pc, #136]	; (8000c60 <Subscribe_MQTT+0xf8>)
 8000bd6:	f001 fc1c 	bl	8002412 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000bda:	2064      	movs	r0, #100	; 0x64
 8000bdc:	f000 fc20 	bl	8001420 <HAL_Delay>
	HAL_UART_Transmit(&huart3,(uint8_t *)esp_tx_buffer,sprintf((char*)esp_tx_buffer,"%c%c%c%c%c%c%s%c",(char)subscribeCon,(char)RemainLength,(char)(packetID << 8),(char)packetID,(char)(TopicLength << 8),(char)TopicLength,topic,(char)Qos),5000);
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <Subscribe_MQTT+0xe0>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461c      	mov	r4, r3
 8000be6:	7b7a      	ldrb	r2, [r7, #13]
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <Subscribe_MQTT+0xe4>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4619      	mov	r1, r3
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <Subscribe_MQTT+0xe8>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	9305      	str	r3, [sp, #20]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	9304      	str	r3, [sp, #16]
 8000c00:	9003      	str	r0, [sp, #12]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9302      	str	r3, [sp, #8]
 8000c06:	9101      	str	r1, [sp, #4]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	4622      	mov	r2, r4
 8000c10:	4910      	ldr	r1, [pc, #64]	; (8000c54 <Subscribe_MQTT+0xec>)
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <Subscribe_MQTT+0xf0>)
 8000c14:	f002 fad6 	bl	80031c4 <siprintf>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c20:	490d      	ldr	r1, [pc, #52]	; (8000c58 <Subscribe_MQTT+0xf0>)
 8000c22:	480f      	ldr	r0, [pc, #60]	; (8000c60 <Subscribe_MQTT+0xf8>)
 8000c24:	f001 fbf5 	bl	8002412 <HAL_UART_Transmit>
    printf_PC("'");printf_PC(topic);printf_PC("'");printf_PC("subscribed\n");
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <Subscribe_MQTT+0xfc>)
 8000c2a:	f000 f94b 	bl	8000ec4 <printf_PC>
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f948 	bl	8000ec4 <printf_PC>
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <Subscribe_MQTT+0xfc>)
 8000c36:	f000 f945 	bl	8000ec4 <printf_PC>
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <Subscribe_MQTT+0x100>)
 8000c3c:	f000 f942 	bl	8000ec4 <printf_PC>
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	2000001e 	.word	0x2000001e
 8000c4c:	2000002c 	.word	0x2000002c
 8000c50:	200000bd 	.word	0x200000bd
 8000c54:	08003c14 	.word	0x08003c14
 8000c58:	200000cc 	.word	0x200000cc
 8000c5c:	08003bc0 	.word	0x08003bc0
 8000c60:	20000130 	.word	0x20000130
 8000c64:	08003c28 	.word	0x08003c28
 8000c68:	08003c2c 	.word	0x08003c2c

08000c6c <publish_MQTT>:
void publish_MQTT(char *topic, char *message)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af04      	add	r7, sp, #16
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]

	uint16_t topiclength = strlen(topic);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fab4 	bl	80001e4 <strlen>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	81fb      	strh	r3, [r7, #14]
	uint8_t remainlength = 2+topiclength+strlen(message);
 8000c80:	89fb      	ldrh	r3, [r7, #14]
 8000c82:	b2dc      	uxtb	r4, r3
 8000c84:	6838      	ldr	r0, [r7, #0]
 8000c86:	f7ff faad 	bl	80001e4 <strlen>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4423      	add	r3, r4
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	3302      	adds	r3, #2
 8000c94:	737b      	strb	r3, [r7, #13]
	int length = sprintf((char*)esp_tx_buffer,"%c%c%c%c%s%s",(char)publishCon,(char)remainlength,(char)(topiclength << 8),(char)topiclength,topic,message);
 8000c96:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <publish_MQTT+0xb8>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	7b7a      	ldrb	r2, [r7, #13]
 8000c9e:	89fb      	ldrh	r3, [r7, #14]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	9303      	str	r3, [sp, #12]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	9101      	str	r1, [sp, #4]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	491c      	ldr	r1, [pc, #112]	; (8000d28 <publish_MQTT+0xbc>)
 8000cb8:	481c      	ldr	r0, [pc, #112]	; (8000d2c <publish_MQTT+0xc0>)
 8000cba:	f002 fa83 	bl	80031c4 <siprintf>
 8000cbe:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart3,(uint8_t *)esp_tx_buffer,sprintf((char*)esp_tx_buffer,"AT+CIPSEND=%d\r\n",length),100);
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	491b      	ldr	r1, [pc, #108]	; (8000d30 <publish_MQTT+0xc4>)
 8000cc4:	4819      	ldr	r0, [pc, #100]	; (8000d2c <publish_MQTT+0xc0>)
 8000cc6:	f002 fa7d 	bl	80031c4 <siprintf>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	2364      	movs	r3, #100	; 0x64
 8000cd0:	4916      	ldr	r1, [pc, #88]	; (8000d2c <publish_MQTT+0xc0>)
 8000cd2:	4818      	ldr	r0, [pc, #96]	; (8000d34 <publish_MQTT+0xc8>)
 8000cd4:	f001 fb9d 	bl	8002412 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000cd8:	2064      	movs	r0, #100	; 0x64
 8000cda:	f000 fba1 	bl	8001420 <HAL_Delay>
	HAL_UART_Transmit(&huart3,(uint8_t *)esp_tx_buffer,sprintf((char*)esp_tx_buffer,"%c%c%c%c%s%s",(char)publishCon,(char)remainlength,(char)(topiclength << 8),(char)topiclength,topic,message),5000);
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <publish_MQTT+0xb8>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	7b7a      	ldrb	r2, [r7, #13]
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4619      	mov	r1, r3
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	9303      	str	r3, [sp, #12]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	9101      	str	r1, [sp, #4]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	490a      	ldr	r1, [pc, #40]	; (8000d28 <publish_MQTT+0xbc>)
 8000d00:	480a      	ldr	r0, [pc, #40]	; (8000d2c <publish_MQTT+0xc0>)
 8000d02:	f002 fa5f 	bl	80031c4 <siprintf>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d0e:	4907      	ldr	r1, [pc, #28]	; (8000d2c <publish_MQTT+0xc0>)
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <publish_MQTT+0xc8>)
 8000d12:	f001 fb7e 	bl	8002412 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000d16:	2064      	movs	r0, #100	; 0x64
 8000d18:	f000 fb82 	bl	8001420 <HAL_Delay>

}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	2000001d 	.word	0x2000001d
 8000d28:	08003c38 	.word	0x08003c38
 8000d2c:	200000cc 	.word	0x200000cc
 8000d30:	08003bc0 	.word	0x08003bc0
 8000d34:	20000130 	.word	0x20000130

08000d38 <Read_Message_MQTT>:
void Read_Message_MQTT()
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0a0      	sub	sp, #128	; 0x80
 8000d3c:	af00      	add	r7, sp, #0
	int remain_length = 0, message_length = 0, topic_length = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d42:	2300      	movs	r3, #0
 8000d44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d46:	2300      	movs	r3, #0
 8000d48:	66bb      	str	r3, [r7, #104]	; 0x68
	char message[100];
	HAL_UART_AbortReceive_IT(&huart3);
 8000d4a:	4852      	ldr	r0, [pc, #328]	; (8000e94 <Read_Message_MQTT+0x15c>)
 8000d4c:	f001 fc24 	bl	8002598 <HAL_UART_AbortReceive_IT>
	for (int i = 0; i < sizeof(esp_rx_buffer); i++) {
 8000d50:	2300      	movs	r3, #0
 8000d52:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d54:	e03a      	b.n	8000dcc <Read_Message_MQTT+0x94>
		if (esp_rx_buffer[i] == 0x30) {
 8000d56:	4a50      	ldr	r2, [pc, #320]	; (8000e98 <Read_Message_MQTT+0x160>)
 8000d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d5a:	4413      	add	r3, r2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b30      	cmp	r3, #48	; 0x30
 8000d62:	d130      	bne.n	8000dc6 <Read_Message_MQTT+0x8e>
			remain_length = esp_rx_buffer[i + 1];
 8000d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a4b      	ldr	r2, [pc, #300]	; (8000e98 <Read_Message_MQTT+0x160>)
 8000d6a:	5cd3      	ldrb	r3, [r2, r3]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
			topic_length = esp_rx_buffer[i + 2] + esp_rx_buffer[i + 3];
 8000d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d72:	3302      	adds	r3, #2
 8000d74:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <Read_Message_MQTT+0x160>)
 8000d76:	5cd3      	ldrb	r3, [r2, r3]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d7e:	3303      	adds	r3, #3
 8000d80:	4a45      	ldr	r2, [pc, #276]	; (8000e98 <Read_Message_MQTT+0x160>)
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	440b      	add	r3, r1
 8000d88:	66bb      	str	r3, [r7, #104]	; 0x68
			message_length = remain_length - (topic_length + 2);
 8000d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int j = 0; j < message_length; j++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	677b      	str	r3, [r7, #116]	; 0x74
 8000d98:	e010      	b.n	8000dbc <Read_Message_MQTT+0x84>

				message[j] = esp_rx_buffer[i + 4 + topic_length + j];
 8000d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d9c:	1d1a      	adds	r2, r3, #4
 8000d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000da0:	441a      	add	r2, r3
 8000da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000da4:	4413      	add	r3, r2
 8000da6:	4a3c      	ldr	r2, [pc, #240]	; (8000e98 <Read_Message_MQTT+0x160>)
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	b2d9      	uxtb	r1, r3
 8000dac:	1d3a      	adds	r2, r7, #4
 8000dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000db0:	4413      	add	r3, r2
 8000db2:	460a      	mov	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < message_length; j++) {
 8000db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000db8:	3301      	adds	r3, #1
 8000dba:	677b      	str	r3, [r7, #116]	; 0x74
 8000dbc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000dbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbea      	blt.n	8000d9a <Read_Message_MQTT+0x62>

			}
			break;
 8000dc4:	e007      	b.n	8000dd6 <Read_Message_MQTT+0x9e>
	for (int i = 0; i < sizeof(esp_rx_buffer); i++) {
 8000dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dc8:	3301      	adds	r3, #1
 8000dca:	67bb      	str	r3, [r7, #120]	; 0x78
 8000dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dce:	f240 22ed 	movw	r2, #749	; 0x2ed
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d9bf      	bls.n	8000d56 <Read_Message_MQTT+0x1e>
		}
	}
	for (int a = 0; a < message_length; a++) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	673b      	str	r3, [r7, #112]	; 0x70
 8000dda:	e00b      	b.n	8000df4 <Read_Message_MQTT+0xbc>
		data_buffer[a] = message[a];
 8000ddc:	1d3a      	adds	r2, r7, #4
 8000dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000de0:	4413      	add	r3, r2
 8000de2:	7819      	ldrb	r1, [r3, #0]
 8000de4:	4a2d      	ldr	r2, [pc, #180]	; (8000e9c <Read_Message_MQTT+0x164>)
 8000de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000de8:	4413      	add	r3, r2
 8000dea:	460a      	mov	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < message_length; a++) {
 8000dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000df0:	3301      	adds	r3, #1
 8000df2:	673b      	str	r3, [r7, #112]	; 0x70
 8000df4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000df6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbef      	blt.n	8000ddc <Read_Message_MQTT+0xa4>
	}
	if (data_buffer[0] != '\0') {
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <Read_Message_MQTT+0x164>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d008      	beq.n	8000e16 <Read_Message_MQTT+0xde>
		printf_PC("Message:");
 8000e04:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <Read_Message_MQTT+0x168>)
 8000e06:	f000 f85d 	bl	8000ec4 <printf_PC>
		printf_PC(data_buffer);
 8000e0a:	4824      	ldr	r0, [pc, #144]	; (8000e9c <Read_Message_MQTT+0x164>)
 8000e0c:	f000 f85a 	bl	8000ec4 <printf_PC>
		printf_PC("\n");
 8000e10:	4824      	ldr	r0, [pc, #144]	; (8000ea4 <Read_Message_MQTT+0x16c>)
 8000e12:	f000 f857 	bl	8000ec4 <printf_PC>
	}

		if(strcmp(data_buffer,"test mqtt") == 0)
 8000e16:	4924      	ldr	r1, [pc, #144]	; (8000ea8 <Read_Message_MQTT+0x170>)
 8000e18:	4820      	ldr	r0, [pc, #128]	; (8000e9c <Read_Message_MQTT+0x164>)
 8000e1a:	f7ff f9d9 	bl	80001d0 <strcmp>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <Read_Message_MQTT+0xf4>
		{
			publish_MQTT("/gokhalil723@gmail.com/test1","Test successful");
 8000e24:	4921      	ldr	r1, [pc, #132]	; (8000eac <Read_Message_MQTT+0x174>)
 8000e26:	4822      	ldr	r0, [pc, #136]	; (8000eb0 <Read_Message_MQTT+0x178>)
 8000e28:	f7ff ff20 	bl	8000c6c <publish_MQTT>
		}

		if(message[0] == 'O' && message[1] == 'N')
 8000e2c:	793b      	ldrb	r3, [r7, #4]
 8000e2e:	2b4f      	cmp	r3, #79	; 0x4f
 8000e30:	d106      	bne.n	8000e40 <Read_Message_MQTT+0x108>
 8000e32:	797b      	ldrb	r3, [r7, #5]
 8000e34:	2b4e      	cmp	r3, #78	; 0x4e
 8000e36:	d103      	bne.n	8000e40 <Read_Message_MQTT+0x108>
		{
			publish_MQTT("/gokhalil723@gmail.com/State","Enable");
 8000e38:	491e      	ldr	r1, [pc, #120]	; (8000eb4 <Read_Message_MQTT+0x17c>)
 8000e3a:	481f      	ldr	r0, [pc, #124]	; (8000eb8 <Read_Message_MQTT+0x180>)
 8000e3c:	f7ff ff16 	bl	8000c6c <publish_MQTT>
		}
		if(message[0] == 'O' && message[1] == 'F' && message[2] == 'F')
 8000e40:	793b      	ldrb	r3, [r7, #4]
 8000e42:	2b4f      	cmp	r3, #79	; 0x4f
 8000e44:	d109      	bne.n	8000e5a <Read_Message_MQTT+0x122>
 8000e46:	797b      	ldrb	r3, [r7, #5]
 8000e48:	2b46      	cmp	r3, #70	; 0x46
 8000e4a:	d106      	bne.n	8000e5a <Read_Message_MQTT+0x122>
 8000e4c:	79bb      	ldrb	r3, [r7, #6]
 8000e4e:	2b46      	cmp	r3, #70	; 0x46
 8000e50:	d103      	bne.n	8000e5a <Read_Message_MQTT+0x122>
		{
			publish_MQTT("/gokhalil723@gmail.com/State","Disable");
 8000e52:	491a      	ldr	r1, [pc, #104]	; (8000ebc <Read_Message_MQTT+0x184>)
 8000e54:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <Read_Message_MQTT+0x180>)
 8000e56:	f7ff ff09 	bl	8000c6c <publish_MQTT>
		}

		memset((char*)esp_rx_buffer,0,sizeof(esp_rx_buffer)); 											// clear buffer
 8000e5a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000e5e:	2100      	movs	r1, #0
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <Read_Message_MQTT+0x160>)
 8000e62:	f002 f9a7 	bl	80031b4 <memset>
		memset(message,0,sizeof(message));
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2264      	movs	r2, #100	; 0x64
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 f9a1 	bl	80031b4 <memset>
		memset(data_buffer,0,sizeof(data_buffer));
 8000e72:	2264      	movs	r2, #100	; 0x64
 8000e74:	2100      	movs	r1, #0
 8000e76:	4809      	ldr	r0, [pc, #36]	; (8000e9c <Read_Message_MQTT+0x164>)
 8000e78:	f002 f99c 	bl	80031b4 <memset>
		byte_esp=0;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <Read_Message_MQTT+0x188>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3,&byte_esp,1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <Read_Message_MQTT+0x188>)
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <Read_Message_MQTT+0x15c>)
 8000e88:	f001 fb55 	bl	8002536 <HAL_UART_Receive_IT>
}
 8000e8c:	bf00      	nop
 8000e8e:	3780      	adds	r7, #128	; 0x80
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000130 	.word	0x20000130
 8000e98:	20000754 	.word	0x20000754
 8000e9c:	20000d9c 	.word	0x20000d9c
 8000ea0:	08003c48 	.word	0x08003c48
 8000ea4:	08003c54 	.word	0x08003c54
 8000ea8:	08003c58 	.word	0x08003c58
 8000eac:	08003c64 	.word	0x08003c64
 8000eb0:	08003c74 	.word	0x08003c74
 8000eb4:	08003c94 	.word	0x08003c94
 8000eb8:	08003c9c 	.word	0x08003c9c
 8000ebc:	08003cbc 	.word	0x08003cbc
 8000ec0:	20000a44 	.word	0x20000a44

08000ec4 <printf_PC>:
/*printf_PC(char *string): you can use this function to communicate
 *  with the device or pc , to receive information.*/


void printf_PC(const char *string)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	counter = 0;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <printf_PC+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
	byte_pc = 0;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <printf_PC+0x6c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
	byte_esp=0;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <printf_PC+0x70>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]

	if (string[0] !='\0') {
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d01d      	beq.n	8000f22 <printf_PC+0x5e>

		sprintf(PC_buffer, string);
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <printf_PC+0x74>)
 8000eea:	f002 f96b 	bl	80031c4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) PC_buffer, strlen(PC_buffer),	1000);
 8000eee:	4812      	ldr	r0, [pc, #72]	; (8000f38 <printf_PC+0x74>)
 8000ef0:	f7ff f978 	bl	80001e4 <strlen>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efc:	490e      	ldr	r1, [pc, #56]	; (8000f38 <printf_PC+0x74>)
 8000efe:	480f      	ldr	r0, [pc, #60]	; (8000f3c <printf_PC+0x78>)
 8000f00:	f001 fa87 	bl	8002412 <HAL_UART_Transmit>
		HAL_Delay(50);
 8000f04:	2032      	movs	r0, #50	; 0x32
 8000f06:	f000 fa8b 	bl	8001420 <HAL_Delay>
		memset(PC_buffer, 0, sizeof(PC_buffer));
 8000f0a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <printf_PC+0x74>)
 8000f12:	f002 f94f 	bl	80031b4 <memset>
		memset((char*)esp_rx_buffer,0, sizeof(esp_rx_buffer));
 8000f16:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4808      	ldr	r0, [pc, #32]	; (8000f40 <printf_PC+0x7c>)
 8000f1e:	f002 f949 	bl	80031b4 <memset>


}
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000bc 	.word	0x200000bc
 8000f30:	20000d7e 	.word	0x20000d7e
 8000f34:	20000a44 	.word	0x20000a44
 8000f38:	20000a48 	.word	0x20000a48
 8000f3c:	20000d38 	.word	0x20000d38
 8000f40:	20000754 	.word	0x20000754

08000f44 <printf_Esp>:
void printf_Esp(const char *string)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	     counter=0;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <printf_Esp+0x70>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
	     byte_pc=0;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <printf_Esp+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
	     byte_esp=0;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <printf_Esp+0x78>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]

	if(string[0] !='\0'){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d021      	beq.n	8000faa <printf_Esp+0x66>

    memset(Esp_buffer, 0, sizeof(Esp_buffer));
 8000f66:	2219      	movs	r2, #25
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <printf_Esp+0x7c>)
 8000f6c:	f002 f922 	bl	80031b4 <memset>
	sprintf(Esp_buffer,string);
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <printf_Esp+0x7c>)
 8000f74:	f002 f926 	bl	80031c4 <siprintf>

	HAL_UART_Transmit(&huart3,(uint8_t*)Esp_buffer,strlen(Esp_buffer),1000);
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <printf_Esp+0x7c>)
 8000f7a:	f7ff f933 	bl	80001e4 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <printf_Esp+0x7c>)
 8000f88:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <printf_Esp+0x80>)
 8000f8a:	f001 fa42 	bl	8002412 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000f8e:	2032      	movs	r0, #50	; 0x32
 8000f90:	f000 fa46 	bl	8001420 <HAL_Delay>
	 memset(Esp_buffer, 0, sizeof(Esp_buffer));
 8000f94:	2219      	movs	r2, #25
 8000f96:	2100      	movs	r1, #0
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <printf_Esp+0x7c>)
 8000f9a:	f002 f90b 	bl	80031b4 <memset>

	 memset((char*)pc_rx_buffer, 0, sizeof(pc_rx_buffer));
 8000f9e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <printf_Esp+0x84>)
 8000fa6:	f002 f905 	bl	80031b4 <memset>
	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000bc 	.word	0x200000bc
 8000fb8:	20000d7e 	.word	0x20000d7e
 8000fbc:	20000a44 	.word	0x20000a44
 8000fc0:	20000d80 	.word	0x20000d80
 8000fc4:	20000130 	.word	0x20000130
 8000fc8:	20000464 	.word	0x20000464

08000fcc <HAL_UART_RxCpltCallback>:
/*HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart):
 * this function is standard uart.C is the function.
 *  This function is called every time the interrupt enters
 *   the interrupt.We do 1 byte to 1 byte reading. We'll record
 *   it in the series. */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) //queried which uart is used
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <HAL_UART_RxCpltCallback+0x74>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d113      	bne.n	8001006 <HAL_UART_RxCpltCallback+0x3a>
	{
		HAL_UART_Receive_IT(&huart2, &byte_pc, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4918      	ldr	r1, [pc, #96]	; (8001044 <HAL_UART_RxCpltCallback+0x78>)
 8000fe2:	4819      	ldr	r0, [pc, #100]	; (8001048 <HAL_UART_RxCpltCallback+0x7c>)
 8000fe4:	f001 faa7 	bl	8002536 <HAL_UART_Receive_IT>

		pc_rx_buffer[counter] = byte_pc;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_UART_RxCpltCallback+0x80>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_UART_RxCpltCallback+0x78>)
 8000ff2:	7819      	ldrb	r1, [r3, #0]
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_UART_RxCpltCallback+0x84>)
 8000ff6:	5499      	strb	r1, [r3, r2]
		counter++;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_RxCpltCallback+0x80>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_UART_RxCpltCallback+0x80>)
 8001004:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART3) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <HAL_UART_RxCpltCallback+0x88>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d113      	bne.n	8001038 <HAL_UART_RxCpltCallback+0x6c>
		HAL_UART_Receive_IT(&huart3, &byte_esp, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	4911      	ldr	r1, [pc, #68]	; (8001058 <HAL_UART_RxCpltCallback+0x8c>)
 8001014:	4811      	ldr	r0, [pc, #68]	; (800105c <HAL_UART_RxCpltCallback+0x90>)
 8001016:	f001 fa8e 	bl	8002536 <HAL_UART_Receive_IT>

		esp_rx_buffer[counter] = byte_esp;
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_UART_RxCpltCallback+0x80>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_UART_RxCpltCallback+0x8c>)
 8001024:	7819      	ldrb	r1, [r3, #0]
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_UART_RxCpltCallback+0x94>)
 8001028:	5499      	strb	r1, [r3, r2]

		counter++;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_UART_RxCpltCallback+0x80>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	3301      	adds	r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_UART_RxCpltCallback+0x80>)
 8001036:	701a      	strb	r2, [r3, #0]
	}
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40004400 	.word	0x40004400
 8001044:	20000d7e 	.word	0x20000d7e
 8001048:	20000d38 	.word	0x20000d38
 800104c:	200000bc 	.word	0x200000bc
 8001050:	20000464 	.word	0x20000464
 8001054:	40004800 	.word	0x40004800
 8001058:	20000a44 	.word	0x20000a44
 800105c:	20000130 	.word	0x20000130
 8001060:	20000754 	.word	0x20000754

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_MspInit+0x4c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_MspInit+0x4c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a3a      	ldr	r2, [pc, #232]	; (80011c8 <HAL_UART_MspInit+0x108>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d134      	bne.n	800114c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	4b39      	ldr	r3, [pc, #228]	; (80011cc <HAL_UART_MspInit+0x10c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a38      	ldr	r2, [pc, #224]	; (80011cc <HAL_UART_MspInit+0x10c>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_UART_MspInit+0x10c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <HAL_UART_MspInit+0x10c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a31      	ldr	r2, [pc, #196]	; (80011cc <HAL_UART_MspInit+0x10c>)
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_UART_MspInit+0x10c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800111a:	2360      	movs	r3, #96	; 0x60
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112a:	2307      	movs	r3, #7
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4826      	ldr	r0, [pc, #152]	; (80011d0 <HAL_UART_MspInit+0x110>)
 8001136:	f000 fb3b 	bl	80017b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2026      	movs	r0, #38	; 0x26
 8001140:	f000 fa6d 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001144:	2026      	movs	r0, #38	; 0x26
 8001146:	f000 fa86 	bl	8001656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800114a:	e039      	b.n	80011c0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <HAL_UART_MspInit+0x114>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d134      	bne.n	80011c0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_UART_MspInit+0x10c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_UART_MspInit+0x10c>)
 8001160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_UART_MspInit+0x10c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_UART_MspInit+0x10c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <HAL_UART_MspInit+0x10c>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_UART_MspInit+0x10c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800118e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a0:	2307      	movs	r3, #7
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <HAL_UART_MspInit+0x118>)
 80011ac:	f000 fb00 	bl	80017b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2027      	movs	r0, #39	; 0x27
 80011b6:	f000 fa32 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011ba:	2027      	movs	r0, #39	; 0x27
 80011bc:	f000 fa4b 	bl	8001656 <HAL_NVIC_EnableIRQ>
}
 80011c0:	bf00      	nop
 80011c2:	3730      	adds	r7, #48	; 0x30
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40004400 	.word	0x40004400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40004800 	.word	0x40004800
 80011d8:	40020400 	.word	0x40020400

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <NMI_Handler+0x4>

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 f8da 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <USART2_IRQHandler+0x10>)
 8001236:	f001 fa19 	bl	800266c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000d38 	.word	0x20000d38

08001244 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <USART3_IRQHandler+0x10>)
 800124a:	f001 fa0f 	bl	800266c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000130 	.word	0x20000130

08001258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <_sbrk+0x5c>)
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <_sbrk+0x60>)
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <_sbrk+0x64>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <_sbrk+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d207      	bcs.n	8001298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001288:	f001 ff6a 	bl	8003160 <__errno>
 800128c:	4603      	mov	r3, r0
 800128e:	220c      	movs	r2, #12
 8001290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e009      	b.n	80012ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <_sbrk+0x64>)
 80012a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20020000 	.word	0x20020000
 80012b8:	00000400 	.word	0x00000400
 80012bc:	200000c0 	.word	0x200000c0
 80012c0:	20000e18 	.word	0x20000e18

080012c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <SystemInit+0x20>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <SystemInit+0x20>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ee:	490e      	ldr	r1, [pc, #56]	; (8001328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001304:	4c0b      	ldr	r4, [pc, #44]	; (8001334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001312:	f7ff ffd7 	bl	80012c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001316:	f001 ff29 	bl	800316c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131a:	f7ff f93d 	bl	8000598 <main>
  bx  lr    
 800131e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800132c:	08003d20 	.word	0x08003d20
  ldr r2, =_sbss
 8001330:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001334:	20000e14 	.word	0x20000e14

08001338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <HAL_Init+0x40>)
 8001346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <HAL_Init+0x40>)
 8001352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_Init+0x40>)
 800135e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f94f 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f808 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001370:	f7ff fe7e 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023c00 	.word	0x40023c00

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x54>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x58>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fbb3 f3f1 	udiv	r3, r3, r1
 800139a:	fbb2 f3f3 	udiv	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f967 	bl	8001672 <HAL_SYSTICK_Config>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00e      	b.n	80013cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d80a      	bhi.n	80013ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f000 f92f 	bl	800161e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_InitTick+0x5c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000030 	.word	0x20000030
 80013d8:	20000038 	.word	0x20000038
 80013dc:	20000034 	.word	0x20000034

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000038 	.word	0x20000038
 8001404:	20000e00 	.word	0x20000e00

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000e00 	.word	0x20000e00

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_Delay+0x44>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001446:	bf00      	nop
 8001448:	f7ff ffde 	bl	8001408 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000038 	.word	0x20000038

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	; (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff29 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff3e 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff8e 	bl	800155c <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5d 	bl	8001508 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff31 	bl	80014cc <__NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffa2 	bl	80015c4 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff feb6 	bl	8001408 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d008      	beq.n	80016bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e052      	b.n	8001762 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0216 	bic.w	r2, r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <HAL_DMA_Abort+0x62>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0208 	bic.w	r2, r2, #8
 80016fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800170c:	e013      	b.n	8001736 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800170e:	f7ff fe7b 	bl	8001408 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b05      	cmp	r3, #5
 800171a:	d90c      	bls.n	8001736 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2220      	movs	r2, #32
 8001720:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e015      	b.n	8001762 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e4      	bne.n	800170e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	223f      	movs	r2, #63	; 0x3f
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d004      	beq.n	8001788 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e00c      	b.n	80017a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2205      	movs	r2, #5
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e16b      	b.n	8001aa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 815a 	bne.w	8001a9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d005      	beq.n	8001802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b03      	cmp	r3, #3
 800186e:	d017      	beq.n	80018a0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80b4 	beq.w	8001a9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b60      	ldr	r3, [pc, #384]	; (8001abc <HAL_GPIO_Init+0x30c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a5f      	ldr	r2, [pc, #380]	; (8001abc <HAL_GPIO_Init+0x30c>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_GPIO_Init+0x30c>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a5b      	ldr	r2, [pc, #364]	; (8001ac0 <HAL_GPIO_Init+0x310>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_GPIO_Init+0x314>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d02b      	beq.n	80019d6 <HAL_GPIO_Init+0x226>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <HAL_GPIO_Init+0x318>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d025      	beq.n	80019d2 <HAL_GPIO_Init+0x222>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a50      	ldr	r2, [pc, #320]	; (8001acc <HAL_GPIO_Init+0x31c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01f      	beq.n	80019ce <HAL_GPIO_Init+0x21e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4f      	ldr	r2, [pc, #316]	; (8001ad0 <HAL_GPIO_Init+0x320>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0x21a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <HAL_GPIO_Init+0x324>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x216>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <HAL_GPIO_Init+0x328>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x212>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_GPIO_Init+0x32c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x20e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4b      	ldr	r2, [pc, #300]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x20a>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e00e      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ba:	2308      	movs	r3, #8
 80019bc:	e00c      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019be:	2306      	movs	r3, #6
 80019c0:	e00a      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019c2:	2305      	movs	r3, #5
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019d6:	2300      	movs	r3, #0
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x310>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1a:	4a32      	ldr	r2, [pc, #200]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a44:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a98:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	f67f ae90 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40021400 	.word	0x40021400
 8001adc:	40021800 	.word	0x40021800
 8001ae0:	40021c00 	.word	0x40021c00
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e264      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d075      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b06:	4ba3      	ldr	r3, [pc, #652]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d00c      	beq.n	8001b2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b12:	4ba0      	ldr	r3, [pc, #640]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d112      	bne.n	8001b44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1e:	4b9d      	ldr	r3, [pc, #628]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b2a:	d10b      	bne.n	8001b44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	4b99      	ldr	r3, [pc, #612]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d05b      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x108>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d157      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e23f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d106      	bne.n	8001b5c <HAL_RCC_OscConfig+0x74>
 8001b4e:	4b91      	ldr	r3, [pc, #580]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a90      	ldr	r2, [pc, #576]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e01d      	b.n	8001b98 <HAL_RCC_OscConfig+0xb0>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x98>
 8001b66:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a8a      	ldr	r2, [pc, #552]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a87      	ldr	r2, [pc, #540]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0xb0>
 8001b80:	4b84      	ldr	r3, [pc, #528]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a83      	ldr	r2, [pc, #524]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a80      	ldr	r2, [pc, #512]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fc32 	bl	8001408 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fc2e 	bl	8001408 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e204      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b76      	ldr	r3, [pc, #472]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xc0>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fc1e 	bl	8001408 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fc1a 	bl	8001408 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1f0      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	4b6c      	ldr	r3, [pc, #432]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xe8>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d063      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bfe:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0a:	4b62      	ldr	r3, [pc, #392]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d11c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c16:	4b5f      	ldr	r3, [pc, #380]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	4b5c      	ldr	r3, [pc, #368]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x152>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1c4      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3a:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4952      	ldr	r1, [pc, #328]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	e03a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c58:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <HAL_RCC_OscConfig+0x2b0>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fbd3 	bl	8001408 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff fbcf 	bl	8001408 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e1a5      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4940      	ldr	r1, [pc, #256]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <HAL_RCC_OscConfig+0x2b0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fbb2 	bl	8001408 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fbae 	bl	8001408 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e184      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d030      	beq.n	8001d34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d016      	beq.n	8001d08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_RCC_OscConfig+0x2b4>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fb92 	bl	8001408 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fb8e 	bl	8001408 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e164      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x200>
 8001d06:	e015      	b.n	8001d34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_OscConfig+0x2b4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fb7b 	bl	8001408 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d16:	f7ff fb77 	bl	8001408 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e14d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a0 	beq.w	8001e82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10f      	bne.n	8001d72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_OscConfig+0x2b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d121      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_RCC_OscConfig+0x2b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_RCC_OscConfig+0x2b8>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fb3d 	bl	8001408 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	e011      	b.n	8001db6 <HAL_RCC_OscConfig+0x2ce>
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	42470000 	.word	0x42470000
 8001d9c:	42470e80 	.word	0x42470e80
 8001da0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7ff fb30 	bl	8001408 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e106      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_RCC_OscConfig+0x4e4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
 8001dca:	4b81      	ldr	r3, [pc, #516]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a80      	ldr	r2, [pc, #512]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	e01c      	b.n	8001e12 <HAL_RCC_OscConfig+0x32a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x312>
 8001de0:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a7a      	ldr	r2, [pc, #488]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	4b78      	ldr	r3, [pc, #480]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	4a77      	ldr	r2, [pc, #476]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6713      	str	r3, [r2, #112]	; 0x70
 8001df8:	e00b      	b.n	8001e12 <HAL_RCC_OscConfig+0x32a>
 8001dfa:	4b75      	ldr	r3, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a74      	ldr	r2, [pc, #464]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	4a71      	ldr	r2, [pc, #452]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1a:	f7ff faf5 	bl	8001408 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff faf1 	bl	8001408 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0c5      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ee      	beq.n	8001e22 <HAL_RCC_OscConfig+0x33a>
 8001e44:	e014      	b.n	8001e70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e46:	f7ff fadf 	bl	8001408 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff fadb 	bl	8001408 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0af      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ee      	bne.n	8001e4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d105      	bne.n	8001e82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e76:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a55      	ldr	r2, [pc, #340]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 809b 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d05c      	beq.n	8001f52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d141      	bne.n	8001f24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <HAL_RCC_OscConfig+0x4ec>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff faaf 	bl	8001408 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff faab 	bl	8001408 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e081      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec0:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	019b      	lsls	r3, r3, #6
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	4937      	ldr	r1, [pc, #220]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef6:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_RCC_OscConfig+0x4ec>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fa84 	bl	8001408 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fa80 	bl	8001408 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e056      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x41c>
 8001f22:	e04e      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCC_OscConfig+0x4ec>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff fa6d 	bl	8001408 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff fa69 	bl	8001408 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e03f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x44a>
 8001f50:	e037      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e032      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_RCC_OscConfig+0x4e8>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d028      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d121      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d11a      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f8e:	4013      	ands	r3, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f94:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d111      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	42470060 	.word	0x42470060

08001fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0cc      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b68      	ldr	r3, [pc, #416]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d90c      	bls.n	8002014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b65      	ldr	r3, [pc, #404]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b63      	ldr	r3, [pc, #396]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0b8      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800202c:	4b59      	ldr	r3, [pc, #356]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a58      	ldr	r2, [pc, #352]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002044:	4b53      	ldr	r3, [pc, #332]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a52      	ldr	r2, [pc, #328]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800204e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002050:	4b50      	ldr	r3, [pc, #320]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	494d      	ldr	r1, [pc, #308]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d044      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d119      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e07f      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d003      	beq.n	8002096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002092:	2b03      	cmp	r3, #3
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e06f      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e067      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b37      	ldr	r3, [pc, #220]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4934      	ldr	r1, [pc, #208]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c8:	f7ff f99e 	bl	8001408 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7ff f99a 	bl	8001408 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e04f      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d20c      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e032      	b.n	8002186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4916      	ldr	r1, [pc, #88]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	490e      	ldr	r1, [pc, #56]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800215e:	f000 f821 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8002162:	4602      	mov	r2, r0
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	490a      	ldr	r1, [pc, #40]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	5ccb      	ldrb	r3, [r1, r3]
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff f8fe 	bl	8001380 <HAL_InitTick>

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00
 8002194:	40023800 	.word	0x40023800
 8002198:	08003cc4 	.word	0x08003cc4
 800219c:	20000030 	.word	0x20000030
 80021a0:	20000034 	.word	0x20000034

080021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021aa:	2100      	movs	r1, #0
 80021ac:	6079      	str	r1, [r7, #4]
 80021ae:	2100      	movs	r1, #0
 80021b0:	60f9      	str	r1, [r7, #12]
 80021b2:	2100      	movs	r1, #0
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021b6:	2100      	movs	r1, #0
 80021b8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ba:	4952      	ldr	r1, [pc, #328]	; (8002304 <HAL_RCC_GetSysClockFreq+0x160>)
 80021bc:	6889      	ldr	r1, [r1, #8]
 80021be:	f001 010c 	and.w	r1, r1, #12
 80021c2:	2908      	cmp	r1, #8
 80021c4:	d00d      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80021c6:	2908      	cmp	r1, #8
 80021c8:	f200 8094 	bhi.w	80022f4 <HAL_RCC_GetSysClockFreq+0x150>
 80021cc:	2900      	cmp	r1, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x32>
 80021d0:	2904      	cmp	r1, #4
 80021d2:	d003      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x38>
 80021d4:	e08e      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d6:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <HAL_RCC_GetSysClockFreq+0x164>)
 80021d8:	60bb      	str	r3, [r7, #8]
       break;
 80021da:	e08e      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021dc:	4b4b      	ldr	r3, [pc, #300]	; (800230c <HAL_RCC_GetSysClockFreq+0x168>)
 80021de:	60bb      	str	r3, [r7, #8]
      break;
 80021e0:	e08b      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e2:	4948      	ldr	r1, [pc, #288]	; (8002304 <HAL_RCC_GetSysClockFreq+0x160>)
 80021e4:	6849      	ldr	r1, [r1, #4]
 80021e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021ea:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ec:	4945      	ldr	r1, [pc, #276]	; (8002304 <HAL_RCC_GetSysClockFreq+0x160>)
 80021ee:	6849      	ldr	r1, [r1, #4]
 80021f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80021f4:	2900      	cmp	r1, #0
 80021f6:	d024      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f8:	4942      	ldr	r1, [pc, #264]	; (8002304 <HAL_RCC_GetSysClockFreq+0x160>)
 80021fa:	6849      	ldr	r1, [r1, #4]
 80021fc:	0989      	lsrs	r1, r1, #6
 80021fe:	4608      	mov	r0, r1
 8002200:	f04f 0100 	mov.w	r1, #0
 8002204:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002208:	f04f 0500 	mov.w	r5, #0
 800220c:	ea00 0204 	and.w	r2, r0, r4
 8002210:	ea01 0305 	and.w	r3, r1, r5
 8002214:	493d      	ldr	r1, [pc, #244]	; (800230c <HAL_RCC_GetSysClockFreq+0x168>)
 8002216:	fb01 f003 	mul.w	r0, r1, r3
 800221a:	2100      	movs	r1, #0
 800221c:	fb01 f102 	mul.w	r1, r1, r2
 8002220:	1844      	adds	r4, r0, r1
 8002222:	493a      	ldr	r1, [pc, #232]	; (800230c <HAL_RCC_GetSysClockFreq+0x168>)
 8002224:	fba2 0101 	umull	r0, r1, r2, r1
 8002228:	1863      	adds	r3, r4, r1
 800222a:	4619      	mov	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	461a      	mov	r2, r3
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	f7fe f834 	bl	80002a0 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4613      	mov	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e04a      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <HAL_RCC_GetSysClockFreq+0x160>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	461a      	mov	r2, r3
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	ea02 0400 	and.w	r4, r2, r0
 800225a:	ea03 0501 	and.w	r5, r3, r1
 800225e:	4620      	mov	r0, r4
 8002260:	4629      	mov	r1, r5
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	014b      	lsls	r3, r1, #5
 800226c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002270:	0142      	lsls	r2, r0, #5
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	1b00      	subs	r0, r0, r4
 8002278:	eb61 0105 	sbc.w	r1, r1, r5
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	018b      	lsls	r3, r1, #6
 8002286:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800228a:	0182      	lsls	r2, r0, #6
 800228c:	1a12      	subs	r2, r2, r0
 800228e:	eb63 0301 	sbc.w	r3, r3, r1
 8002292:	f04f 0000 	mov.w	r0, #0
 8002296:	f04f 0100 	mov.w	r1, #0
 800229a:	00d9      	lsls	r1, r3, #3
 800229c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022a0:	00d0      	lsls	r0, r2, #3
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	1912      	adds	r2, r2, r4
 80022a8:	eb45 0303 	adc.w	r3, r5, r3
 80022ac:	f04f 0000 	mov.w	r0, #0
 80022b0:	f04f 0100 	mov.w	r1, #0
 80022b4:	0299      	lsls	r1, r3, #10
 80022b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022ba:	0290      	lsls	r0, r2, #10
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	f7fd ffe8 	bl	80002a0 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4613      	mov	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_RCC_GetSysClockFreq+0x160>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	3301      	adds	r3, #1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	60bb      	str	r3, [r7, #8]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <HAL_RCC_GetSysClockFreq+0x164>)
 80022f6:	60bb      	str	r3, [r7, #8]
      break;
 80022f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fa:	68bb      	ldr	r3, [r7, #8]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bdb0      	pop	{r4, r5, r7, pc}
 8002304:	40023800 	.word	0x40023800
 8002308:	00f42400 	.word	0x00f42400
 800230c:	017d7840 	.word	0x017d7840

08002310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_RCC_GetHCLKFreq+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000030 	.word	0x20000030

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800232c:	f7ff fff0 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0a9b      	lsrs	r3, r3, #10
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4903      	ldr	r1, [pc, #12]	; (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	08003cd4 	.word	0x08003cd4

08002350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002354:	f7ff ffdc 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0b5b      	lsrs	r3, r3, #13
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	08003cd4 	.word	0x08003cd4

08002378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e03f      	b.n	800240a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fe8e 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	; 0x24
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fd07 	bl	8002dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b08a      	sub	sp, #40	; 0x28
 8002416:	af02      	add	r7, sp, #8
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b20      	cmp	r3, #32
 8002430:	d17c      	bne.n	800252c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_UART_Transmit+0x2c>
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e075      	b.n	800252e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_UART_Transmit+0x3e>
 800244c:	2302      	movs	r3, #2
 800244e:	e06e      	b.n	800252e <HAL_UART_Transmit+0x11c>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2221      	movs	r2, #33	; 0x21
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002466:	f7fe ffcf 	bl	8001408 <HAL_GetTick>
 800246a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	88fa      	ldrh	r2, [r7, #6]
 8002470:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	88fa      	ldrh	r2, [r7, #6]
 8002476:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002480:	d108      	bne.n	8002494 <HAL_UART_Transmit+0x82>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d104      	bne.n	8002494 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	e003      	b.n	800249c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024a4:	e02a      	b.n	80024fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fab1 	bl	8002a18 <UART_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e036      	b.n	800252e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	3302      	adds	r3, #2
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	e007      	b.n	80024ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	3301      	adds	r3, #1
 80024ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1cf      	bne.n	80024a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2200      	movs	r2, #0
 800250e:	2140      	movs	r1, #64	; 0x40
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fa81 	bl	8002a18 <UART_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e006      	b.n	800252e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	4613      	mov	r3, r2
 8002542:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b20      	cmp	r3, #32
 800254e:	d11d      	bne.n	800258c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_UART_Receive_IT+0x26>
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e016      	b.n	800258e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_UART_Receive_IT+0x38>
 800256a:	2302      	movs	r3, #2
 800256c:	e00f      	b.n	800258e <HAL_UART_Receive_IT+0x58>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	461a      	mov	r2, r3
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fa92 	bl	8002aac <UART_Start_Receive_IT>
 8002588:	4603      	mov	r3, r0
 800258a:	e000      	b.n	800258e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d107      	bne.n	80025d8 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0210 	bic.w	r2, r2, #16
 80025d6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d12d      	bne.n	8002642 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d013      	beq.n	8002626 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002602:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_UART_AbortReceive_IT+0xd0>)
 8002604:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f8ad 	bl	800176a <HAL_DMA_Abort_IT>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d022      	beq.n	800265c <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002620:	4610      	mov	r0, r2
 8002622:	4798      	blx	r3
 8002624:	e01a      	b.n	800265c <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f9d6 	bl	80029ec <HAL_UART_AbortReceiveCpltCallback>
 8002640:	e00c      	b.n	800265c <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f9c8 	bl	80029ec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08002ba3 	.word	0x08002ba3

0800266c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_UART_IRQHandler+0x52>
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 faf3 	bl	8002ca2 <UART_Receive_IT>
      return;
 80026bc:	e17c      	b.n	80029b8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80b1 	beq.w	8002828 <HAL_UART_IRQHandler+0x1bc>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <HAL_UART_IRQHandler+0x70>
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80a6 	beq.w	8002828 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_UART_IRQHandler+0x90>
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_UART_IRQHandler+0xb0>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f043 0202 	orr.w	r2, r3, #2
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_UART_IRQHandler+0xd0>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00f      	beq.n	8002766 <HAL_UART_IRQHandler+0xfa>
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <HAL_UART_IRQHandler+0xee>
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f043 0208 	orr.w	r2, r3, #8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 811f 	beq.w	80029ae <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_UART_IRQHandler+0x11e>
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fa8c 	bl	8002ca2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_UART_IRQHandler+0x146>
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d031      	beq.n	8002816 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f9b4 	bl	8002b20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d123      	bne.n	800280e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d013      	beq.n	8002806 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	4a77      	ldr	r2, [pc, #476]	; (80029c0 <HAL_UART_IRQHandler+0x354>)
 80027e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe ffbd 	bl	800176a <HAL_DMA_Abort_IT>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002800:	4610      	mov	r0, r2
 8002802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002804:	e00e      	b.n	8002824 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8e6 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280c:	e00a      	b.n	8002824 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8e2 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	e006      	b.n	8002824 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8de 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002822:	e0c4      	b.n	80029ae <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002824:	bf00      	nop
    return;
 8002826:	e0c2      	b.n	80029ae <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	2b01      	cmp	r3, #1
 800282e:	f040 80a2 	bne.w	8002976 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 809c 	beq.w	8002976 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8096 	beq.w	8002976 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d14f      	bne.n	800290e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002878:	8a3b      	ldrh	r3, [r7, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8099 	beq.w	80029b2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002884:	8a3a      	ldrh	r2, [r7, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	f080 8093 	bcs.w	80029b2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8a3a      	ldrh	r2, [r7, #16]
 8002890:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289c:	d02b      	beq.n	80028f6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ac:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028cc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0210 	bic.w	r2, r2, #16
 80028ea:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe feca 	bl	800168a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028fe:	b29b      	uxth	r3, r3
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	b29b      	uxth	r3, r3
 8002904:	4619      	mov	r1, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f87a 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800290c:	e051      	b.n	80029b2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002916:	b29b      	uxth	r3, r3
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d047      	beq.n	80029b6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002926:	8a7b      	ldrh	r3, [r7, #18]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d044      	beq.n	80029b6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800293a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0210 	bic.w	r2, r2, #16
 8002968:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800296a:	8a7b      	ldrh	r3, [r7, #18]
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f846 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002974:	e01f      	b.n	80029b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_UART_IRQHandler+0x326>
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f921 	bl	8002bd2 <UART_Transmit_IT>
    return;
 8002990:	e012      	b.n	80029b8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00d      	beq.n	80029b8 <HAL_UART_IRQHandler+0x34c>
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f963 	bl	8002c72 <UART_EndTransmit_IT>
    return;
 80029ac:	e004      	b.n	80029b8 <HAL_UART_IRQHandler+0x34c>
    return;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <HAL_UART_IRQHandler+0x34c>
      return;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <HAL_UART_IRQHandler+0x34c>
      return;
 80029b6:	bf00      	nop
  }
}
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	08002b7b 	.word	0x08002b7b

080029c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a28:	e02c      	b.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d028      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a38:	f7fe fce6 	bl	8001408 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d21d      	bcs.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a56:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e00f      	b.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d0c3      	beq.n	8002a2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	88fa      	ldrh	r2, [r7, #6]
 8002ac4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2222      	movs	r2, #34	; 0x22
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0220 	orr.w	r2, r2, #32
 8002b10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b36:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0210 	bic.w	r2, r2, #16
 8002b5e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff ff1f 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff ff11 	bl	80029ec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b21      	cmp	r3, #33	; 0x21
 8002be4:	d13e      	bne.n	8002c64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bee:	d114      	bne.n	8002c1a <UART_Transmit_IT+0x48>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d110      	bne.n	8002c1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	1c9a      	adds	r2, r3, #2
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	621a      	str	r2, [r3, #32]
 8002c18:	e008      	b.n	8002c2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	1c59      	adds	r1, r3, #1
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6211      	str	r1, [r2, #32]
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10f      	bne.n	8002c60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e000      	b.n	8002c66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c64:	2302      	movs	r3, #2
  }
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fe96 	bl	80029c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b22      	cmp	r3, #34	; 0x22
 8002cb4:	f040 8087 	bne.w	8002dc6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc0:	d117      	bne.n	8002cf2 <UART_Receive_IT+0x50>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d113      	bne.n	8002cf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	1c9a      	adds	r2, r3, #2
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf0:	e026      	b.n	8002d40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d04:	d007      	beq.n	8002d16 <UART_Receive_IT+0x74>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10a      	bne.n	8002d24 <UART_Receive_IT+0x82>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e008      	b.n	8002d36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d136      	bne.n	8002dc2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0220 	bic.w	r2, r2, #32
 8002d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10e      	bne.n	8002db2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0210 	bic.w	r2, r2, #16
 8002da2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fe28 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
 8002db0:	e002      	b.n	8002db8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe f90a 	bl	8000fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e002      	b.n	8002dc8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd4:	b09f      	sub	sp, #124	; 0x7c
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de6:	68d9      	ldr	r1, [r3, #12]
 8002de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	ea40 0301 	orr.w	r3, r0, r1
 8002df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e14:	f021 010c 	bic.w	r1, r1, #12
 8002e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2e:	6999      	ldr	r1, [r3, #24]
 8002e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	ea40 0301 	orr.w	r3, r0, r1
 8002e38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4bc5      	ldr	r3, [pc, #788]	; (8003154 <UART_SetConfig+0x384>)
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d004      	beq.n	8002e4e <UART_SetConfig+0x7e>
 8002e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4bc3      	ldr	r3, [pc, #780]	; (8003158 <UART_SetConfig+0x388>)
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d103      	bne.n	8002e56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e4e:	f7ff fa7f 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 8002e52:	6778      	str	r0, [r7, #116]	; 0x74
 8002e54:	e002      	b.n	8002e5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e56:	f7ff fa67 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8002e5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e64:	f040 80b6 	bne.w	8002fd4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6a:	461c      	mov	r4, r3
 8002e6c:	f04f 0500 	mov.w	r5, #0
 8002e70:	4622      	mov	r2, r4
 8002e72:	462b      	mov	r3, r5
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	6439      	str	r1, [r7, #64]	; 0x40
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e80:	1912      	adds	r2, r2, r4
 8002e82:	eb45 0303 	adc.w	r3, r5, r3
 8002e86:	f04f 0000 	mov.w	r0, #0
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	00d9      	lsls	r1, r3, #3
 8002e90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e94:	00d0      	lsls	r0, r2, #3
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	1911      	adds	r1, r2, r4
 8002e9c:	6639      	str	r1, [r7, #96]	; 0x60
 8002e9e:	416b      	adcs	r3, r5
 8002ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8002ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	1891      	adds	r1, r2, r2
 8002eae:	63b9      	str	r1, [r7, #56]	; 0x38
 8002eb0:	415b      	adcs	r3, r3
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002eb8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ebc:	f7fd f9f0 	bl	80002a0 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4ba5      	ldr	r3, [pc, #660]	; (800315c <UART_SetConfig+0x38c>)
 8002ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	011e      	lsls	r6, r3, #4
 8002ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed0:	461c      	mov	r4, r3
 8002ed2:	f04f 0500 	mov.w	r5, #0
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	462b      	mov	r3, r5
 8002eda:	1891      	adds	r1, r2, r2
 8002edc:	6339      	str	r1, [r7, #48]	; 0x30
 8002ede:	415b      	adcs	r3, r3
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ee6:	1912      	adds	r2, r2, r4
 8002ee8:	eb45 0303 	adc.w	r3, r5, r3
 8002eec:	f04f 0000 	mov.w	r0, #0
 8002ef0:	f04f 0100 	mov.w	r1, #0
 8002ef4:	00d9      	lsls	r1, r3, #3
 8002ef6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002efa:	00d0      	lsls	r0, r2, #3
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	1911      	adds	r1, r2, r4
 8002f02:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f04:	416b      	adcs	r3, r5
 8002f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	1891      	adds	r1, r2, r2
 8002f14:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f16:	415b      	adcs	r3, r3
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f22:	f7fd f9bd 	bl	80002a0 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4b8c      	ldr	r3, [pc, #560]	; (800315c <UART_SetConfig+0x38c>)
 8002f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2164      	movs	r1, #100	; 0x64
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	3332      	adds	r3, #50	; 0x32
 8002f3e:	4a87      	ldr	r2, [pc, #540]	; (800315c <UART_SetConfig+0x38c>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f4c:	441e      	add	r6, r3
 8002f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f50:	4618      	mov	r0, r3
 8002f52:	f04f 0100 	mov.w	r1, #0
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	1894      	adds	r4, r2, r2
 8002f5c:	623c      	str	r4, [r7, #32]
 8002f5e:	415b      	adcs	r3, r3
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f66:	1812      	adds	r2, r2, r0
 8002f68:	eb41 0303 	adc.w	r3, r1, r3
 8002f6c:	f04f 0400 	mov.w	r4, #0
 8002f70:	f04f 0500 	mov.w	r5, #0
 8002f74:	00dd      	lsls	r5, r3, #3
 8002f76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f7a:	00d4      	lsls	r4, r2, #3
 8002f7c:	4622      	mov	r2, r4
 8002f7e:	462b      	mov	r3, r5
 8002f80:	1814      	adds	r4, r2, r0
 8002f82:	653c      	str	r4, [r7, #80]	; 0x50
 8002f84:	414b      	adcs	r3, r1
 8002f86:	657b      	str	r3, [r7, #84]	; 0x54
 8002f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	1891      	adds	r1, r2, r2
 8002f94:	61b9      	str	r1, [r7, #24]
 8002f96:	415b      	adcs	r3, r3
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002fa2:	f7fd f97d 	bl	80002a0 <__aeabi_uldivmod>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4b6c      	ldr	r3, [pc, #432]	; (800315c <UART_SetConfig+0x38c>)
 8002fac:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	2164      	movs	r1, #100	; 0x64
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	3332      	adds	r3, #50	; 0x32
 8002fbe:	4a67      	ldr	r2, [pc, #412]	; (800315c <UART_SetConfig+0x38c>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	f003 0207 	and.w	r2, r3, #7
 8002fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4432      	add	r2, r6
 8002fd0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fd2:	e0b9      	b.n	8003148 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd6:	461c      	mov	r4, r3
 8002fd8:	f04f 0500 	mov.w	r5, #0
 8002fdc:	4622      	mov	r2, r4
 8002fde:	462b      	mov	r3, r5
 8002fe0:	1891      	adds	r1, r2, r2
 8002fe2:	6139      	str	r1, [r7, #16]
 8002fe4:	415b      	adcs	r3, r3
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fec:	1912      	adds	r2, r2, r4
 8002fee:	eb45 0303 	adc.w	r3, r5, r3
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	00d9      	lsls	r1, r3, #3
 8002ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003000:	00d0      	lsls	r0, r2, #3
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	eb12 0804 	adds.w	r8, r2, r4
 800300a:	eb43 0905 	adc.w	r9, r3, r5
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	008b      	lsls	r3, r1, #2
 8003022:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003026:	0082      	lsls	r2, r0, #2
 8003028:	4640      	mov	r0, r8
 800302a:	4649      	mov	r1, r9
 800302c:	f7fd f938 	bl	80002a0 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4b49      	ldr	r3, [pc, #292]	; (800315c <UART_SetConfig+0x38c>)
 8003036:	fba3 2302 	umull	r2, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	011e      	lsls	r6, r3, #4
 800303e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003040:	4618      	mov	r0, r3
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	1894      	adds	r4, r2, r2
 800304c:	60bc      	str	r4, [r7, #8]
 800304e:	415b      	adcs	r3, r3
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003056:	1812      	adds	r2, r2, r0
 8003058:	eb41 0303 	adc.w	r3, r1, r3
 800305c:	f04f 0400 	mov.w	r4, #0
 8003060:	f04f 0500 	mov.w	r5, #0
 8003064:	00dd      	lsls	r5, r3, #3
 8003066:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800306a:	00d4      	lsls	r4, r2, #3
 800306c:	4622      	mov	r2, r4
 800306e:	462b      	mov	r3, r5
 8003070:	1814      	adds	r4, r2, r0
 8003072:	64bc      	str	r4, [r7, #72]	; 0x48
 8003074:	414b      	adcs	r3, r1
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4618      	mov	r0, r3
 800307e:	f04f 0100 	mov.w	r1, #0
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	008b      	lsls	r3, r1, #2
 800308c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003090:	0082      	lsls	r2, r0, #2
 8003092:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003096:	f7fd f903 	bl	80002a0 <__aeabi_uldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4b2f      	ldr	r3, [pc, #188]	; (800315c <UART_SetConfig+0x38c>)
 80030a0:	fba3 1302 	umull	r1, r3, r3, r2
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	2164      	movs	r1, #100	; 0x64
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	3332      	adds	r3, #50	; 0x32
 80030b2:	4a2a      	ldr	r2, [pc, #168]	; (800315c <UART_SetConfig+0x38c>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030be:	441e      	add	r6, r3
 80030c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c2:	4618      	mov	r0, r3
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	1894      	adds	r4, r2, r2
 80030ce:	603c      	str	r4, [r7, #0]
 80030d0:	415b      	adcs	r3, r3
 80030d2:	607b      	str	r3, [r7, #4]
 80030d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030d8:	1812      	adds	r2, r2, r0
 80030da:	eb41 0303 	adc.w	r3, r1, r3
 80030de:	f04f 0400 	mov.w	r4, #0
 80030e2:	f04f 0500 	mov.w	r5, #0
 80030e6:	00dd      	lsls	r5, r3, #3
 80030e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030ec:	00d4      	lsls	r4, r2, #3
 80030ee:	4622      	mov	r2, r4
 80030f0:	462b      	mov	r3, r5
 80030f2:	eb12 0a00 	adds.w	sl, r2, r0
 80030f6:	eb43 0b01 	adc.w	fp, r3, r1
 80030fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4618      	mov	r0, r3
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	008b      	lsls	r3, r1, #2
 800310e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003112:	0082      	lsls	r2, r0, #2
 8003114:	4650      	mov	r0, sl
 8003116:	4659      	mov	r1, fp
 8003118:	f7fd f8c2 	bl	80002a0 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <UART_SetConfig+0x38c>)
 8003122:	fba3 1302 	umull	r1, r3, r3, r2
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2164      	movs	r1, #100	; 0x64
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	3332      	adds	r3, #50	; 0x32
 8003134:	4a09      	ldr	r2, [pc, #36]	; (800315c <UART_SetConfig+0x38c>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	f003 020f 	and.w	r2, r3, #15
 8003140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4432      	add	r2, r6
 8003146:	609a      	str	r2, [r3, #8]
}
 8003148:	bf00      	nop
 800314a:	377c      	adds	r7, #124	; 0x7c
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003152:	bf00      	nop
 8003154:	40011000 	.word	0x40011000
 8003158:	40011400 	.word	0x40011400
 800315c:	51eb851f 	.word	0x51eb851f

08003160 <__errno>:
 8003160:	4b01      	ldr	r3, [pc, #4]	; (8003168 <__errno+0x8>)
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	2000003c 	.word	0x2000003c

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4d0d      	ldr	r5, [pc, #52]	; (80031a4 <__libc_init_array+0x38>)
 8003170:	4c0d      	ldr	r4, [pc, #52]	; (80031a8 <__libc_init_array+0x3c>)
 8003172:	1b64      	subs	r4, r4, r5
 8003174:	10a4      	asrs	r4, r4, #2
 8003176:	2600      	movs	r6, #0
 8003178:	42a6      	cmp	r6, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	4d0b      	ldr	r5, [pc, #44]	; (80031ac <__libc_init_array+0x40>)
 800317e:	4c0c      	ldr	r4, [pc, #48]	; (80031b0 <__libc_init_array+0x44>)
 8003180:	f000 fc56 	bl	8003a30 <_init>
 8003184:	1b64      	subs	r4, r4, r5
 8003186:	10a4      	asrs	r4, r4, #2
 8003188:	2600      	movs	r6, #0
 800318a:	42a6      	cmp	r6, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	f855 3b04 	ldr.w	r3, [r5], #4
 8003194:	4798      	blx	r3
 8003196:	3601      	adds	r6, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	f855 3b04 	ldr.w	r3, [r5], #4
 800319e:	4798      	blx	r3
 80031a0:	3601      	adds	r6, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	08003d18 	.word	0x08003d18
 80031a8:	08003d18 	.word	0x08003d18
 80031ac:	08003d18 	.word	0x08003d18
 80031b0:	08003d1c 	.word	0x08003d1c

080031b4 <memset>:
 80031b4:	4402      	add	r2, r0
 80031b6:	4603      	mov	r3, r0
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d100      	bne.n	80031be <memset+0xa>
 80031bc:	4770      	bx	lr
 80031be:	f803 1b01 	strb.w	r1, [r3], #1
 80031c2:	e7f9      	b.n	80031b8 <memset+0x4>

080031c4 <siprintf>:
 80031c4:	b40e      	push	{r1, r2, r3}
 80031c6:	b500      	push	{lr}
 80031c8:	b09c      	sub	sp, #112	; 0x70
 80031ca:	ab1d      	add	r3, sp, #116	; 0x74
 80031cc:	9002      	str	r0, [sp, #8]
 80031ce:	9006      	str	r0, [sp, #24]
 80031d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031d4:	4809      	ldr	r0, [pc, #36]	; (80031fc <siprintf+0x38>)
 80031d6:	9107      	str	r1, [sp, #28]
 80031d8:	9104      	str	r1, [sp, #16]
 80031da:	4909      	ldr	r1, [pc, #36]	; (8003200 <siprintf+0x3c>)
 80031dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80031e0:	9105      	str	r1, [sp, #20]
 80031e2:	6800      	ldr	r0, [r0, #0]
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	a902      	add	r1, sp, #8
 80031e8:	f000 f870 	bl	80032cc <_svfiprintf_r>
 80031ec:	9b02      	ldr	r3, [sp, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	b01c      	add	sp, #112	; 0x70
 80031f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031f8:	b003      	add	sp, #12
 80031fa:	4770      	bx	lr
 80031fc:	2000003c 	.word	0x2000003c
 8003200:	ffff0208 	.word	0xffff0208

08003204 <strcpy>:
 8003204:	4603      	mov	r3, r0
 8003206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800320a:	f803 2b01 	strb.w	r2, [r3], #1
 800320e:	2a00      	cmp	r2, #0
 8003210:	d1f9      	bne.n	8003206 <strcpy+0x2>
 8003212:	4770      	bx	lr

08003214 <__ssputs_r>:
 8003214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003218:	688e      	ldr	r6, [r1, #8]
 800321a:	429e      	cmp	r6, r3
 800321c:	4682      	mov	sl, r0
 800321e:	460c      	mov	r4, r1
 8003220:	4690      	mov	r8, r2
 8003222:	461f      	mov	r7, r3
 8003224:	d838      	bhi.n	8003298 <__ssputs_r+0x84>
 8003226:	898a      	ldrh	r2, [r1, #12]
 8003228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800322c:	d032      	beq.n	8003294 <__ssputs_r+0x80>
 800322e:	6825      	ldr	r5, [r4, #0]
 8003230:	6909      	ldr	r1, [r1, #16]
 8003232:	eba5 0901 	sub.w	r9, r5, r1
 8003236:	6965      	ldr	r5, [r4, #20]
 8003238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800323c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003240:	3301      	adds	r3, #1
 8003242:	444b      	add	r3, r9
 8003244:	106d      	asrs	r5, r5, #1
 8003246:	429d      	cmp	r5, r3
 8003248:	bf38      	it	cc
 800324a:	461d      	movcc	r5, r3
 800324c:	0553      	lsls	r3, r2, #21
 800324e:	d531      	bpl.n	80032b4 <__ssputs_r+0xa0>
 8003250:	4629      	mov	r1, r5
 8003252:	f000 fb47 	bl	80038e4 <_malloc_r>
 8003256:	4606      	mov	r6, r0
 8003258:	b950      	cbnz	r0, 8003270 <__ssputs_r+0x5c>
 800325a:	230c      	movs	r3, #12
 800325c:	f8ca 3000 	str.w	r3, [sl]
 8003260:	89a3      	ldrh	r3, [r4, #12]
 8003262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003266:	81a3      	strh	r3, [r4, #12]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003270:	6921      	ldr	r1, [r4, #16]
 8003272:	464a      	mov	r2, r9
 8003274:	f000 fabe 	bl	80037f4 <memcpy>
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800327e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	6126      	str	r6, [r4, #16]
 8003286:	6165      	str	r5, [r4, #20]
 8003288:	444e      	add	r6, r9
 800328a:	eba5 0509 	sub.w	r5, r5, r9
 800328e:	6026      	str	r6, [r4, #0]
 8003290:	60a5      	str	r5, [r4, #8]
 8003292:	463e      	mov	r6, r7
 8003294:	42be      	cmp	r6, r7
 8003296:	d900      	bls.n	800329a <__ssputs_r+0x86>
 8003298:	463e      	mov	r6, r7
 800329a:	4632      	mov	r2, r6
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	4641      	mov	r1, r8
 80032a0:	f000 fab6 	bl	8003810 <memmove>
 80032a4:	68a3      	ldr	r3, [r4, #8]
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	1b9b      	subs	r3, r3, r6
 80032aa:	4432      	add	r2, r6
 80032ac:	60a3      	str	r3, [r4, #8]
 80032ae:	6022      	str	r2, [r4, #0]
 80032b0:	2000      	movs	r0, #0
 80032b2:	e7db      	b.n	800326c <__ssputs_r+0x58>
 80032b4:	462a      	mov	r2, r5
 80032b6:	f000 fb6f 	bl	8003998 <_realloc_r>
 80032ba:	4606      	mov	r6, r0
 80032bc:	2800      	cmp	r0, #0
 80032be:	d1e1      	bne.n	8003284 <__ssputs_r+0x70>
 80032c0:	6921      	ldr	r1, [r4, #16]
 80032c2:	4650      	mov	r0, sl
 80032c4:	f000 fabe 	bl	8003844 <_free_r>
 80032c8:	e7c7      	b.n	800325a <__ssputs_r+0x46>
	...

080032cc <_svfiprintf_r>:
 80032cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d0:	4698      	mov	r8, r3
 80032d2:	898b      	ldrh	r3, [r1, #12]
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	b09d      	sub	sp, #116	; 0x74
 80032d8:	4607      	mov	r7, r0
 80032da:	460d      	mov	r5, r1
 80032dc:	4614      	mov	r4, r2
 80032de:	d50e      	bpl.n	80032fe <_svfiprintf_r+0x32>
 80032e0:	690b      	ldr	r3, [r1, #16]
 80032e2:	b963      	cbnz	r3, 80032fe <_svfiprintf_r+0x32>
 80032e4:	2140      	movs	r1, #64	; 0x40
 80032e6:	f000 fafd 	bl	80038e4 <_malloc_r>
 80032ea:	6028      	str	r0, [r5, #0]
 80032ec:	6128      	str	r0, [r5, #16]
 80032ee:	b920      	cbnz	r0, 80032fa <_svfiprintf_r+0x2e>
 80032f0:	230c      	movs	r3, #12
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	e0d1      	b.n	800349e <_svfiprintf_r+0x1d2>
 80032fa:	2340      	movs	r3, #64	; 0x40
 80032fc:	616b      	str	r3, [r5, #20]
 80032fe:	2300      	movs	r3, #0
 8003300:	9309      	str	r3, [sp, #36]	; 0x24
 8003302:	2320      	movs	r3, #32
 8003304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003308:	f8cd 800c 	str.w	r8, [sp, #12]
 800330c:	2330      	movs	r3, #48	; 0x30
 800330e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80034b8 <_svfiprintf_r+0x1ec>
 8003312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003316:	f04f 0901 	mov.w	r9, #1
 800331a:	4623      	mov	r3, r4
 800331c:	469a      	mov	sl, r3
 800331e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003322:	b10a      	cbz	r2, 8003328 <_svfiprintf_r+0x5c>
 8003324:	2a25      	cmp	r2, #37	; 0x25
 8003326:	d1f9      	bne.n	800331c <_svfiprintf_r+0x50>
 8003328:	ebba 0b04 	subs.w	fp, sl, r4
 800332c:	d00b      	beq.n	8003346 <_svfiprintf_r+0x7a>
 800332e:	465b      	mov	r3, fp
 8003330:	4622      	mov	r2, r4
 8003332:	4629      	mov	r1, r5
 8003334:	4638      	mov	r0, r7
 8003336:	f7ff ff6d 	bl	8003214 <__ssputs_r>
 800333a:	3001      	adds	r0, #1
 800333c:	f000 80aa 	beq.w	8003494 <_svfiprintf_r+0x1c8>
 8003340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003342:	445a      	add	r2, fp
 8003344:	9209      	str	r2, [sp, #36]	; 0x24
 8003346:	f89a 3000 	ldrb.w	r3, [sl]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80a2 	beq.w	8003494 <_svfiprintf_r+0x1c8>
 8003350:	2300      	movs	r3, #0
 8003352:	f04f 32ff 	mov.w	r2, #4294967295
 8003356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800335a:	f10a 0a01 	add.w	sl, sl, #1
 800335e:	9304      	str	r3, [sp, #16]
 8003360:	9307      	str	r3, [sp, #28]
 8003362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003366:	931a      	str	r3, [sp, #104]	; 0x68
 8003368:	4654      	mov	r4, sl
 800336a:	2205      	movs	r2, #5
 800336c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003370:	4851      	ldr	r0, [pc, #324]	; (80034b8 <_svfiprintf_r+0x1ec>)
 8003372:	f7fc ff45 	bl	8000200 <memchr>
 8003376:	9a04      	ldr	r2, [sp, #16]
 8003378:	b9d8      	cbnz	r0, 80033b2 <_svfiprintf_r+0xe6>
 800337a:	06d0      	lsls	r0, r2, #27
 800337c:	bf44      	itt	mi
 800337e:	2320      	movmi	r3, #32
 8003380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003384:	0711      	lsls	r1, r2, #28
 8003386:	bf44      	itt	mi
 8003388:	232b      	movmi	r3, #43	; 0x2b
 800338a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800338e:	f89a 3000 	ldrb.w	r3, [sl]
 8003392:	2b2a      	cmp	r3, #42	; 0x2a
 8003394:	d015      	beq.n	80033c2 <_svfiprintf_r+0xf6>
 8003396:	9a07      	ldr	r2, [sp, #28]
 8003398:	4654      	mov	r4, sl
 800339a:	2000      	movs	r0, #0
 800339c:	f04f 0c0a 	mov.w	ip, #10
 80033a0:	4621      	mov	r1, r4
 80033a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033a6:	3b30      	subs	r3, #48	; 0x30
 80033a8:	2b09      	cmp	r3, #9
 80033aa:	d94e      	bls.n	800344a <_svfiprintf_r+0x17e>
 80033ac:	b1b0      	cbz	r0, 80033dc <_svfiprintf_r+0x110>
 80033ae:	9207      	str	r2, [sp, #28]
 80033b0:	e014      	b.n	80033dc <_svfiprintf_r+0x110>
 80033b2:	eba0 0308 	sub.w	r3, r0, r8
 80033b6:	fa09 f303 	lsl.w	r3, r9, r3
 80033ba:	4313      	orrs	r3, r2
 80033bc:	9304      	str	r3, [sp, #16]
 80033be:	46a2      	mov	sl, r4
 80033c0:	e7d2      	b.n	8003368 <_svfiprintf_r+0x9c>
 80033c2:	9b03      	ldr	r3, [sp, #12]
 80033c4:	1d19      	adds	r1, r3, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	9103      	str	r1, [sp, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bfbb      	ittet	lt
 80033ce:	425b      	neglt	r3, r3
 80033d0:	f042 0202 	orrlt.w	r2, r2, #2
 80033d4:	9307      	strge	r3, [sp, #28]
 80033d6:	9307      	strlt	r3, [sp, #28]
 80033d8:	bfb8      	it	lt
 80033da:	9204      	strlt	r2, [sp, #16]
 80033dc:	7823      	ldrb	r3, [r4, #0]
 80033de:	2b2e      	cmp	r3, #46	; 0x2e
 80033e0:	d10c      	bne.n	80033fc <_svfiprintf_r+0x130>
 80033e2:	7863      	ldrb	r3, [r4, #1]
 80033e4:	2b2a      	cmp	r3, #42	; 0x2a
 80033e6:	d135      	bne.n	8003454 <_svfiprintf_r+0x188>
 80033e8:	9b03      	ldr	r3, [sp, #12]
 80033ea:	1d1a      	adds	r2, r3, #4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	9203      	str	r2, [sp, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bfb8      	it	lt
 80033f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80033f8:	3402      	adds	r4, #2
 80033fa:	9305      	str	r3, [sp, #20]
 80033fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80034c8 <_svfiprintf_r+0x1fc>
 8003400:	7821      	ldrb	r1, [r4, #0]
 8003402:	2203      	movs	r2, #3
 8003404:	4650      	mov	r0, sl
 8003406:	f7fc fefb 	bl	8000200 <memchr>
 800340a:	b140      	cbz	r0, 800341e <_svfiprintf_r+0x152>
 800340c:	2340      	movs	r3, #64	; 0x40
 800340e:	eba0 000a 	sub.w	r0, r0, sl
 8003412:	fa03 f000 	lsl.w	r0, r3, r0
 8003416:	9b04      	ldr	r3, [sp, #16]
 8003418:	4303      	orrs	r3, r0
 800341a:	3401      	adds	r4, #1
 800341c:	9304      	str	r3, [sp, #16]
 800341e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003422:	4826      	ldr	r0, [pc, #152]	; (80034bc <_svfiprintf_r+0x1f0>)
 8003424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003428:	2206      	movs	r2, #6
 800342a:	f7fc fee9 	bl	8000200 <memchr>
 800342e:	2800      	cmp	r0, #0
 8003430:	d038      	beq.n	80034a4 <_svfiprintf_r+0x1d8>
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <_svfiprintf_r+0x1f4>)
 8003434:	bb1b      	cbnz	r3, 800347e <_svfiprintf_r+0x1b2>
 8003436:	9b03      	ldr	r3, [sp, #12]
 8003438:	3307      	adds	r3, #7
 800343a:	f023 0307 	bic.w	r3, r3, #7
 800343e:	3308      	adds	r3, #8
 8003440:	9303      	str	r3, [sp, #12]
 8003442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003444:	4433      	add	r3, r6
 8003446:	9309      	str	r3, [sp, #36]	; 0x24
 8003448:	e767      	b.n	800331a <_svfiprintf_r+0x4e>
 800344a:	fb0c 3202 	mla	r2, ip, r2, r3
 800344e:	460c      	mov	r4, r1
 8003450:	2001      	movs	r0, #1
 8003452:	e7a5      	b.n	80033a0 <_svfiprintf_r+0xd4>
 8003454:	2300      	movs	r3, #0
 8003456:	3401      	adds	r4, #1
 8003458:	9305      	str	r3, [sp, #20]
 800345a:	4619      	mov	r1, r3
 800345c:	f04f 0c0a 	mov.w	ip, #10
 8003460:	4620      	mov	r0, r4
 8003462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003466:	3a30      	subs	r2, #48	; 0x30
 8003468:	2a09      	cmp	r2, #9
 800346a:	d903      	bls.n	8003474 <_svfiprintf_r+0x1a8>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0c5      	beq.n	80033fc <_svfiprintf_r+0x130>
 8003470:	9105      	str	r1, [sp, #20]
 8003472:	e7c3      	b.n	80033fc <_svfiprintf_r+0x130>
 8003474:	fb0c 2101 	mla	r1, ip, r1, r2
 8003478:	4604      	mov	r4, r0
 800347a:	2301      	movs	r3, #1
 800347c:	e7f0      	b.n	8003460 <_svfiprintf_r+0x194>
 800347e:	ab03      	add	r3, sp, #12
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	462a      	mov	r2, r5
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <_svfiprintf_r+0x1f8>)
 8003486:	a904      	add	r1, sp, #16
 8003488:	4638      	mov	r0, r7
 800348a:	f3af 8000 	nop.w
 800348e:	1c42      	adds	r2, r0, #1
 8003490:	4606      	mov	r6, r0
 8003492:	d1d6      	bne.n	8003442 <_svfiprintf_r+0x176>
 8003494:	89ab      	ldrh	r3, [r5, #12]
 8003496:	065b      	lsls	r3, r3, #25
 8003498:	f53f af2c 	bmi.w	80032f4 <_svfiprintf_r+0x28>
 800349c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800349e:	b01d      	add	sp, #116	; 0x74
 80034a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a4:	ab03      	add	r3, sp, #12
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	462a      	mov	r2, r5
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <_svfiprintf_r+0x1f8>)
 80034ac:	a904      	add	r1, sp, #16
 80034ae:	4638      	mov	r0, r7
 80034b0:	f000 f87a 	bl	80035a8 <_printf_i>
 80034b4:	e7eb      	b.n	800348e <_svfiprintf_r+0x1c2>
 80034b6:	bf00      	nop
 80034b8:	08003cdc 	.word	0x08003cdc
 80034bc:	08003ce6 	.word	0x08003ce6
 80034c0:	00000000 	.word	0x00000000
 80034c4:	08003215 	.word	0x08003215
 80034c8:	08003ce2 	.word	0x08003ce2

080034cc <_printf_common>:
 80034cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	4616      	mov	r6, r2
 80034d2:	4699      	mov	r9, r3
 80034d4:	688a      	ldr	r2, [r1, #8]
 80034d6:	690b      	ldr	r3, [r1, #16]
 80034d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034dc:	4293      	cmp	r3, r2
 80034de:	bfb8      	it	lt
 80034e0:	4613      	movlt	r3, r2
 80034e2:	6033      	str	r3, [r6, #0]
 80034e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034e8:	4607      	mov	r7, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	b10a      	cbz	r2, 80034f2 <_printf_common+0x26>
 80034ee:	3301      	adds	r3, #1
 80034f0:	6033      	str	r3, [r6, #0]
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	0699      	lsls	r1, r3, #26
 80034f6:	bf42      	ittt	mi
 80034f8:	6833      	ldrmi	r3, [r6, #0]
 80034fa:	3302      	addmi	r3, #2
 80034fc:	6033      	strmi	r3, [r6, #0]
 80034fe:	6825      	ldr	r5, [r4, #0]
 8003500:	f015 0506 	ands.w	r5, r5, #6
 8003504:	d106      	bne.n	8003514 <_printf_common+0x48>
 8003506:	f104 0a19 	add.w	sl, r4, #25
 800350a:	68e3      	ldr	r3, [r4, #12]
 800350c:	6832      	ldr	r2, [r6, #0]
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	42ab      	cmp	r3, r5
 8003512:	dc26      	bgt.n	8003562 <_printf_common+0x96>
 8003514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003518:	1e13      	subs	r3, r2, #0
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	bf18      	it	ne
 800351e:	2301      	movne	r3, #1
 8003520:	0692      	lsls	r2, r2, #26
 8003522:	d42b      	bmi.n	800357c <_printf_common+0xb0>
 8003524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003528:	4649      	mov	r1, r9
 800352a:	4638      	mov	r0, r7
 800352c:	47c0      	blx	r8
 800352e:	3001      	adds	r0, #1
 8003530:	d01e      	beq.n	8003570 <_printf_common+0xa4>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	68e5      	ldr	r5, [r4, #12]
 8003536:	6832      	ldr	r2, [r6, #0]
 8003538:	f003 0306 	and.w	r3, r3, #6
 800353c:	2b04      	cmp	r3, #4
 800353e:	bf08      	it	eq
 8003540:	1aad      	subeq	r5, r5, r2
 8003542:	68a3      	ldr	r3, [r4, #8]
 8003544:	6922      	ldr	r2, [r4, #16]
 8003546:	bf0c      	ite	eq
 8003548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800354c:	2500      	movne	r5, #0
 800354e:	4293      	cmp	r3, r2
 8003550:	bfc4      	itt	gt
 8003552:	1a9b      	subgt	r3, r3, r2
 8003554:	18ed      	addgt	r5, r5, r3
 8003556:	2600      	movs	r6, #0
 8003558:	341a      	adds	r4, #26
 800355a:	42b5      	cmp	r5, r6
 800355c:	d11a      	bne.n	8003594 <_printf_common+0xc8>
 800355e:	2000      	movs	r0, #0
 8003560:	e008      	b.n	8003574 <_printf_common+0xa8>
 8003562:	2301      	movs	r3, #1
 8003564:	4652      	mov	r2, sl
 8003566:	4649      	mov	r1, r9
 8003568:	4638      	mov	r0, r7
 800356a:	47c0      	blx	r8
 800356c:	3001      	adds	r0, #1
 800356e:	d103      	bne.n	8003578 <_printf_common+0xac>
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003578:	3501      	adds	r5, #1
 800357a:	e7c6      	b.n	800350a <_printf_common+0x3e>
 800357c:	18e1      	adds	r1, r4, r3
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	2030      	movs	r0, #48	; 0x30
 8003582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003586:	4422      	add	r2, r4
 8003588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800358c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003590:	3302      	adds	r3, #2
 8003592:	e7c7      	b.n	8003524 <_printf_common+0x58>
 8003594:	2301      	movs	r3, #1
 8003596:	4622      	mov	r2, r4
 8003598:	4649      	mov	r1, r9
 800359a:	4638      	mov	r0, r7
 800359c:	47c0      	blx	r8
 800359e:	3001      	adds	r0, #1
 80035a0:	d0e6      	beq.n	8003570 <_printf_common+0xa4>
 80035a2:	3601      	adds	r6, #1
 80035a4:	e7d9      	b.n	800355a <_printf_common+0x8e>
	...

080035a8 <_printf_i>:
 80035a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035ac:	460c      	mov	r4, r1
 80035ae:	4691      	mov	r9, r2
 80035b0:	7e27      	ldrb	r7, [r4, #24]
 80035b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80035b4:	2f78      	cmp	r7, #120	; 0x78
 80035b6:	4680      	mov	r8, r0
 80035b8:	469a      	mov	sl, r3
 80035ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035be:	d807      	bhi.n	80035d0 <_printf_i+0x28>
 80035c0:	2f62      	cmp	r7, #98	; 0x62
 80035c2:	d80a      	bhi.n	80035da <_printf_i+0x32>
 80035c4:	2f00      	cmp	r7, #0
 80035c6:	f000 80d8 	beq.w	800377a <_printf_i+0x1d2>
 80035ca:	2f58      	cmp	r7, #88	; 0x58
 80035cc:	f000 80a3 	beq.w	8003716 <_printf_i+0x16e>
 80035d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035d8:	e03a      	b.n	8003650 <_printf_i+0xa8>
 80035da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035de:	2b15      	cmp	r3, #21
 80035e0:	d8f6      	bhi.n	80035d0 <_printf_i+0x28>
 80035e2:	a001      	add	r0, pc, #4	; (adr r0, 80035e8 <_printf_i+0x40>)
 80035e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80035e8:	08003641 	.word	0x08003641
 80035ec:	08003655 	.word	0x08003655
 80035f0:	080035d1 	.word	0x080035d1
 80035f4:	080035d1 	.word	0x080035d1
 80035f8:	080035d1 	.word	0x080035d1
 80035fc:	080035d1 	.word	0x080035d1
 8003600:	08003655 	.word	0x08003655
 8003604:	080035d1 	.word	0x080035d1
 8003608:	080035d1 	.word	0x080035d1
 800360c:	080035d1 	.word	0x080035d1
 8003610:	080035d1 	.word	0x080035d1
 8003614:	08003761 	.word	0x08003761
 8003618:	08003685 	.word	0x08003685
 800361c:	08003743 	.word	0x08003743
 8003620:	080035d1 	.word	0x080035d1
 8003624:	080035d1 	.word	0x080035d1
 8003628:	08003783 	.word	0x08003783
 800362c:	080035d1 	.word	0x080035d1
 8003630:	08003685 	.word	0x08003685
 8003634:	080035d1 	.word	0x080035d1
 8003638:	080035d1 	.word	0x080035d1
 800363c:	0800374b 	.word	0x0800374b
 8003640:	680b      	ldr	r3, [r1, #0]
 8003642:	1d1a      	adds	r2, r3, #4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	600a      	str	r2, [r1, #0]
 8003648:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800364c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003650:	2301      	movs	r3, #1
 8003652:	e0a3      	b.n	800379c <_printf_i+0x1f4>
 8003654:	6825      	ldr	r5, [r4, #0]
 8003656:	6808      	ldr	r0, [r1, #0]
 8003658:	062e      	lsls	r6, r5, #24
 800365a:	f100 0304 	add.w	r3, r0, #4
 800365e:	d50a      	bpl.n	8003676 <_printf_i+0xce>
 8003660:	6805      	ldr	r5, [r0, #0]
 8003662:	600b      	str	r3, [r1, #0]
 8003664:	2d00      	cmp	r5, #0
 8003666:	da03      	bge.n	8003670 <_printf_i+0xc8>
 8003668:	232d      	movs	r3, #45	; 0x2d
 800366a:	426d      	negs	r5, r5
 800366c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003670:	485e      	ldr	r0, [pc, #376]	; (80037ec <_printf_i+0x244>)
 8003672:	230a      	movs	r3, #10
 8003674:	e019      	b.n	80036aa <_printf_i+0x102>
 8003676:	f015 0f40 	tst.w	r5, #64	; 0x40
 800367a:	6805      	ldr	r5, [r0, #0]
 800367c:	600b      	str	r3, [r1, #0]
 800367e:	bf18      	it	ne
 8003680:	b22d      	sxthne	r5, r5
 8003682:	e7ef      	b.n	8003664 <_printf_i+0xbc>
 8003684:	680b      	ldr	r3, [r1, #0]
 8003686:	6825      	ldr	r5, [r4, #0]
 8003688:	1d18      	adds	r0, r3, #4
 800368a:	6008      	str	r0, [r1, #0]
 800368c:	0628      	lsls	r0, r5, #24
 800368e:	d501      	bpl.n	8003694 <_printf_i+0xec>
 8003690:	681d      	ldr	r5, [r3, #0]
 8003692:	e002      	b.n	800369a <_printf_i+0xf2>
 8003694:	0669      	lsls	r1, r5, #25
 8003696:	d5fb      	bpl.n	8003690 <_printf_i+0xe8>
 8003698:	881d      	ldrh	r5, [r3, #0]
 800369a:	4854      	ldr	r0, [pc, #336]	; (80037ec <_printf_i+0x244>)
 800369c:	2f6f      	cmp	r7, #111	; 0x6f
 800369e:	bf0c      	ite	eq
 80036a0:	2308      	moveq	r3, #8
 80036a2:	230a      	movne	r3, #10
 80036a4:	2100      	movs	r1, #0
 80036a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036aa:	6866      	ldr	r6, [r4, #4]
 80036ac:	60a6      	str	r6, [r4, #8]
 80036ae:	2e00      	cmp	r6, #0
 80036b0:	bfa2      	ittt	ge
 80036b2:	6821      	ldrge	r1, [r4, #0]
 80036b4:	f021 0104 	bicge.w	r1, r1, #4
 80036b8:	6021      	strge	r1, [r4, #0]
 80036ba:	b90d      	cbnz	r5, 80036c0 <_printf_i+0x118>
 80036bc:	2e00      	cmp	r6, #0
 80036be:	d04d      	beq.n	800375c <_printf_i+0x1b4>
 80036c0:	4616      	mov	r6, r2
 80036c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80036c6:	fb03 5711 	mls	r7, r3, r1, r5
 80036ca:	5dc7      	ldrb	r7, [r0, r7]
 80036cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036d0:	462f      	mov	r7, r5
 80036d2:	42bb      	cmp	r3, r7
 80036d4:	460d      	mov	r5, r1
 80036d6:	d9f4      	bls.n	80036c2 <_printf_i+0x11a>
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d10b      	bne.n	80036f4 <_printf_i+0x14c>
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	07df      	lsls	r7, r3, #31
 80036e0:	d508      	bpl.n	80036f4 <_printf_i+0x14c>
 80036e2:	6923      	ldr	r3, [r4, #16]
 80036e4:	6861      	ldr	r1, [r4, #4]
 80036e6:	4299      	cmp	r1, r3
 80036e8:	bfde      	ittt	le
 80036ea:	2330      	movle	r3, #48	; 0x30
 80036ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036f4:	1b92      	subs	r2, r2, r6
 80036f6:	6122      	str	r2, [r4, #16]
 80036f8:	f8cd a000 	str.w	sl, [sp]
 80036fc:	464b      	mov	r3, r9
 80036fe:	aa03      	add	r2, sp, #12
 8003700:	4621      	mov	r1, r4
 8003702:	4640      	mov	r0, r8
 8003704:	f7ff fee2 	bl	80034cc <_printf_common>
 8003708:	3001      	adds	r0, #1
 800370a:	d14c      	bne.n	80037a6 <_printf_i+0x1fe>
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	b004      	add	sp, #16
 8003712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003716:	4835      	ldr	r0, [pc, #212]	; (80037ec <_printf_i+0x244>)
 8003718:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	680e      	ldr	r6, [r1, #0]
 8003720:	061f      	lsls	r7, r3, #24
 8003722:	f856 5b04 	ldr.w	r5, [r6], #4
 8003726:	600e      	str	r6, [r1, #0]
 8003728:	d514      	bpl.n	8003754 <_printf_i+0x1ac>
 800372a:	07d9      	lsls	r1, r3, #31
 800372c:	bf44      	itt	mi
 800372e:	f043 0320 	orrmi.w	r3, r3, #32
 8003732:	6023      	strmi	r3, [r4, #0]
 8003734:	b91d      	cbnz	r5, 800373e <_printf_i+0x196>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	f023 0320 	bic.w	r3, r3, #32
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	2310      	movs	r3, #16
 8003740:	e7b0      	b.n	80036a4 <_printf_i+0xfc>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	f043 0320 	orr.w	r3, r3, #32
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	2378      	movs	r3, #120	; 0x78
 800374c:	4828      	ldr	r0, [pc, #160]	; (80037f0 <_printf_i+0x248>)
 800374e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003752:	e7e3      	b.n	800371c <_printf_i+0x174>
 8003754:	065e      	lsls	r6, r3, #25
 8003756:	bf48      	it	mi
 8003758:	b2ad      	uxthmi	r5, r5
 800375a:	e7e6      	b.n	800372a <_printf_i+0x182>
 800375c:	4616      	mov	r6, r2
 800375e:	e7bb      	b.n	80036d8 <_printf_i+0x130>
 8003760:	680b      	ldr	r3, [r1, #0]
 8003762:	6826      	ldr	r6, [r4, #0]
 8003764:	6960      	ldr	r0, [r4, #20]
 8003766:	1d1d      	adds	r5, r3, #4
 8003768:	600d      	str	r5, [r1, #0]
 800376a:	0635      	lsls	r5, r6, #24
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	d501      	bpl.n	8003774 <_printf_i+0x1cc>
 8003770:	6018      	str	r0, [r3, #0]
 8003772:	e002      	b.n	800377a <_printf_i+0x1d2>
 8003774:	0671      	lsls	r1, r6, #25
 8003776:	d5fb      	bpl.n	8003770 <_printf_i+0x1c8>
 8003778:	8018      	strh	r0, [r3, #0]
 800377a:	2300      	movs	r3, #0
 800377c:	6123      	str	r3, [r4, #16]
 800377e:	4616      	mov	r6, r2
 8003780:	e7ba      	b.n	80036f8 <_printf_i+0x150>
 8003782:	680b      	ldr	r3, [r1, #0]
 8003784:	1d1a      	adds	r2, r3, #4
 8003786:	600a      	str	r2, [r1, #0]
 8003788:	681e      	ldr	r6, [r3, #0]
 800378a:	6862      	ldr	r2, [r4, #4]
 800378c:	2100      	movs	r1, #0
 800378e:	4630      	mov	r0, r6
 8003790:	f7fc fd36 	bl	8000200 <memchr>
 8003794:	b108      	cbz	r0, 800379a <_printf_i+0x1f2>
 8003796:	1b80      	subs	r0, r0, r6
 8003798:	6060      	str	r0, [r4, #4]
 800379a:	6863      	ldr	r3, [r4, #4]
 800379c:	6123      	str	r3, [r4, #16]
 800379e:	2300      	movs	r3, #0
 80037a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037a4:	e7a8      	b.n	80036f8 <_printf_i+0x150>
 80037a6:	6923      	ldr	r3, [r4, #16]
 80037a8:	4632      	mov	r2, r6
 80037aa:	4649      	mov	r1, r9
 80037ac:	4640      	mov	r0, r8
 80037ae:	47d0      	blx	sl
 80037b0:	3001      	adds	r0, #1
 80037b2:	d0ab      	beq.n	800370c <_printf_i+0x164>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	079b      	lsls	r3, r3, #30
 80037b8:	d413      	bmi.n	80037e2 <_printf_i+0x23a>
 80037ba:	68e0      	ldr	r0, [r4, #12]
 80037bc:	9b03      	ldr	r3, [sp, #12]
 80037be:	4298      	cmp	r0, r3
 80037c0:	bfb8      	it	lt
 80037c2:	4618      	movlt	r0, r3
 80037c4:	e7a4      	b.n	8003710 <_printf_i+0x168>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4632      	mov	r2, r6
 80037ca:	4649      	mov	r1, r9
 80037cc:	4640      	mov	r0, r8
 80037ce:	47d0      	blx	sl
 80037d0:	3001      	adds	r0, #1
 80037d2:	d09b      	beq.n	800370c <_printf_i+0x164>
 80037d4:	3501      	adds	r5, #1
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	9903      	ldr	r1, [sp, #12]
 80037da:	1a5b      	subs	r3, r3, r1
 80037dc:	42ab      	cmp	r3, r5
 80037de:	dcf2      	bgt.n	80037c6 <_printf_i+0x21e>
 80037e0:	e7eb      	b.n	80037ba <_printf_i+0x212>
 80037e2:	2500      	movs	r5, #0
 80037e4:	f104 0619 	add.w	r6, r4, #25
 80037e8:	e7f5      	b.n	80037d6 <_printf_i+0x22e>
 80037ea:	bf00      	nop
 80037ec:	08003ced 	.word	0x08003ced
 80037f0:	08003cfe 	.word	0x08003cfe

080037f4 <memcpy>:
 80037f4:	440a      	add	r2, r1
 80037f6:	4291      	cmp	r1, r2
 80037f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037fc:	d100      	bne.n	8003800 <memcpy+0xc>
 80037fe:	4770      	bx	lr
 8003800:	b510      	push	{r4, lr}
 8003802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800380a:	4291      	cmp	r1, r2
 800380c:	d1f9      	bne.n	8003802 <memcpy+0xe>
 800380e:	bd10      	pop	{r4, pc}

08003810 <memmove>:
 8003810:	4288      	cmp	r0, r1
 8003812:	b510      	push	{r4, lr}
 8003814:	eb01 0402 	add.w	r4, r1, r2
 8003818:	d902      	bls.n	8003820 <memmove+0x10>
 800381a:	4284      	cmp	r4, r0
 800381c:	4623      	mov	r3, r4
 800381e:	d807      	bhi.n	8003830 <memmove+0x20>
 8003820:	1e43      	subs	r3, r0, #1
 8003822:	42a1      	cmp	r1, r4
 8003824:	d008      	beq.n	8003838 <memmove+0x28>
 8003826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800382a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800382e:	e7f8      	b.n	8003822 <memmove+0x12>
 8003830:	4402      	add	r2, r0
 8003832:	4601      	mov	r1, r0
 8003834:	428a      	cmp	r2, r1
 8003836:	d100      	bne.n	800383a <memmove+0x2a>
 8003838:	bd10      	pop	{r4, pc}
 800383a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800383e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003842:	e7f7      	b.n	8003834 <memmove+0x24>

08003844 <_free_r>:
 8003844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003846:	2900      	cmp	r1, #0
 8003848:	d048      	beq.n	80038dc <_free_r+0x98>
 800384a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800384e:	9001      	str	r0, [sp, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f1a1 0404 	sub.w	r4, r1, #4
 8003856:	bfb8      	it	lt
 8003858:	18e4      	addlt	r4, r4, r3
 800385a:	f000 f8d3 	bl	8003a04 <__malloc_lock>
 800385e:	4a20      	ldr	r2, [pc, #128]	; (80038e0 <_free_r+0x9c>)
 8003860:	9801      	ldr	r0, [sp, #4]
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	4615      	mov	r5, r2
 8003866:	b933      	cbnz	r3, 8003876 <_free_r+0x32>
 8003868:	6063      	str	r3, [r4, #4]
 800386a:	6014      	str	r4, [r2, #0]
 800386c:	b003      	add	sp, #12
 800386e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003872:	f000 b8cd 	b.w	8003a10 <__malloc_unlock>
 8003876:	42a3      	cmp	r3, r4
 8003878:	d90b      	bls.n	8003892 <_free_r+0x4e>
 800387a:	6821      	ldr	r1, [r4, #0]
 800387c:	1862      	adds	r2, r4, r1
 800387e:	4293      	cmp	r3, r2
 8003880:	bf04      	itt	eq
 8003882:	681a      	ldreq	r2, [r3, #0]
 8003884:	685b      	ldreq	r3, [r3, #4]
 8003886:	6063      	str	r3, [r4, #4]
 8003888:	bf04      	itt	eq
 800388a:	1852      	addeq	r2, r2, r1
 800388c:	6022      	streq	r2, [r4, #0]
 800388e:	602c      	str	r4, [r5, #0]
 8003890:	e7ec      	b.n	800386c <_free_r+0x28>
 8003892:	461a      	mov	r2, r3
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	b10b      	cbz	r3, 800389c <_free_r+0x58>
 8003898:	42a3      	cmp	r3, r4
 800389a:	d9fa      	bls.n	8003892 <_free_r+0x4e>
 800389c:	6811      	ldr	r1, [r2, #0]
 800389e:	1855      	adds	r5, r2, r1
 80038a0:	42a5      	cmp	r5, r4
 80038a2:	d10b      	bne.n	80038bc <_free_r+0x78>
 80038a4:	6824      	ldr	r4, [r4, #0]
 80038a6:	4421      	add	r1, r4
 80038a8:	1854      	adds	r4, r2, r1
 80038aa:	42a3      	cmp	r3, r4
 80038ac:	6011      	str	r1, [r2, #0]
 80038ae:	d1dd      	bne.n	800386c <_free_r+0x28>
 80038b0:	681c      	ldr	r4, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	6053      	str	r3, [r2, #4]
 80038b6:	4421      	add	r1, r4
 80038b8:	6011      	str	r1, [r2, #0]
 80038ba:	e7d7      	b.n	800386c <_free_r+0x28>
 80038bc:	d902      	bls.n	80038c4 <_free_r+0x80>
 80038be:	230c      	movs	r3, #12
 80038c0:	6003      	str	r3, [r0, #0]
 80038c2:	e7d3      	b.n	800386c <_free_r+0x28>
 80038c4:	6825      	ldr	r5, [r4, #0]
 80038c6:	1961      	adds	r1, r4, r5
 80038c8:	428b      	cmp	r3, r1
 80038ca:	bf04      	itt	eq
 80038cc:	6819      	ldreq	r1, [r3, #0]
 80038ce:	685b      	ldreq	r3, [r3, #4]
 80038d0:	6063      	str	r3, [r4, #4]
 80038d2:	bf04      	itt	eq
 80038d4:	1949      	addeq	r1, r1, r5
 80038d6:	6021      	streq	r1, [r4, #0]
 80038d8:	6054      	str	r4, [r2, #4]
 80038da:	e7c7      	b.n	800386c <_free_r+0x28>
 80038dc:	b003      	add	sp, #12
 80038de:	bd30      	pop	{r4, r5, pc}
 80038e0:	200000c4 	.word	0x200000c4

080038e4 <_malloc_r>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	1ccd      	adds	r5, r1, #3
 80038e8:	f025 0503 	bic.w	r5, r5, #3
 80038ec:	3508      	adds	r5, #8
 80038ee:	2d0c      	cmp	r5, #12
 80038f0:	bf38      	it	cc
 80038f2:	250c      	movcc	r5, #12
 80038f4:	2d00      	cmp	r5, #0
 80038f6:	4606      	mov	r6, r0
 80038f8:	db01      	blt.n	80038fe <_malloc_r+0x1a>
 80038fa:	42a9      	cmp	r1, r5
 80038fc:	d903      	bls.n	8003906 <_malloc_r+0x22>
 80038fe:	230c      	movs	r3, #12
 8003900:	6033      	str	r3, [r6, #0]
 8003902:	2000      	movs	r0, #0
 8003904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003906:	f000 f87d 	bl	8003a04 <__malloc_lock>
 800390a:	4921      	ldr	r1, [pc, #132]	; (8003990 <_malloc_r+0xac>)
 800390c:	680a      	ldr	r2, [r1, #0]
 800390e:	4614      	mov	r4, r2
 8003910:	b99c      	cbnz	r4, 800393a <_malloc_r+0x56>
 8003912:	4f20      	ldr	r7, [pc, #128]	; (8003994 <_malloc_r+0xb0>)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	b923      	cbnz	r3, 8003922 <_malloc_r+0x3e>
 8003918:	4621      	mov	r1, r4
 800391a:	4630      	mov	r0, r6
 800391c:	f000 f862 	bl	80039e4 <_sbrk_r>
 8003920:	6038      	str	r0, [r7, #0]
 8003922:	4629      	mov	r1, r5
 8003924:	4630      	mov	r0, r6
 8003926:	f000 f85d 	bl	80039e4 <_sbrk_r>
 800392a:	1c43      	adds	r3, r0, #1
 800392c:	d123      	bne.n	8003976 <_malloc_r+0x92>
 800392e:	230c      	movs	r3, #12
 8003930:	6033      	str	r3, [r6, #0]
 8003932:	4630      	mov	r0, r6
 8003934:	f000 f86c 	bl	8003a10 <__malloc_unlock>
 8003938:	e7e3      	b.n	8003902 <_malloc_r+0x1e>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	1b5b      	subs	r3, r3, r5
 800393e:	d417      	bmi.n	8003970 <_malloc_r+0x8c>
 8003940:	2b0b      	cmp	r3, #11
 8003942:	d903      	bls.n	800394c <_malloc_r+0x68>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	441c      	add	r4, r3
 8003948:	6025      	str	r5, [r4, #0]
 800394a:	e004      	b.n	8003956 <_malloc_r+0x72>
 800394c:	6863      	ldr	r3, [r4, #4]
 800394e:	42a2      	cmp	r2, r4
 8003950:	bf0c      	ite	eq
 8003952:	600b      	streq	r3, [r1, #0]
 8003954:	6053      	strne	r3, [r2, #4]
 8003956:	4630      	mov	r0, r6
 8003958:	f000 f85a 	bl	8003a10 <__malloc_unlock>
 800395c:	f104 000b 	add.w	r0, r4, #11
 8003960:	1d23      	adds	r3, r4, #4
 8003962:	f020 0007 	bic.w	r0, r0, #7
 8003966:	1ac2      	subs	r2, r0, r3
 8003968:	d0cc      	beq.n	8003904 <_malloc_r+0x20>
 800396a:	1a1b      	subs	r3, r3, r0
 800396c:	50a3      	str	r3, [r4, r2]
 800396e:	e7c9      	b.n	8003904 <_malloc_r+0x20>
 8003970:	4622      	mov	r2, r4
 8003972:	6864      	ldr	r4, [r4, #4]
 8003974:	e7cc      	b.n	8003910 <_malloc_r+0x2c>
 8003976:	1cc4      	adds	r4, r0, #3
 8003978:	f024 0403 	bic.w	r4, r4, #3
 800397c:	42a0      	cmp	r0, r4
 800397e:	d0e3      	beq.n	8003948 <_malloc_r+0x64>
 8003980:	1a21      	subs	r1, r4, r0
 8003982:	4630      	mov	r0, r6
 8003984:	f000 f82e 	bl	80039e4 <_sbrk_r>
 8003988:	3001      	adds	r0, #1
 800398a:	d1dd      	bne.n	8003948 <_malloc_r+0x64>
 800398c:	e7cf      	b.n	800392e <_malloc_r+0x4a>
 800398e:	bf00      	nop
 8003990:	200000c4 	.word	0x200000c4
 8003994:	200000c8 	.word	0x200000c8

08003998 <_realloc_r>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	4607      	mov	r7, r0
 800399c:	4614      	mov	r4, r2
 800399e:	460e      	mov	r6, r1
 80039a0:	b921      	cbnz	r1, 80039ac <_realloc_r+0x14>
 80039a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039a6:	4611      	mov	r1, r2
 80039a8:	f7ff bf9c 	b.w	80038e4 <_malloc_r>
 80039ac:	b922      	cbnz	r2, 80039b8 <_realloc_r+0x20>
 80039ae:	f7ff ff49 	bl	8003844 <_free_r>
 80039b2:	4625      	mov	r5, r4
 80039b4:	4628      	mov	r0, r5
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b8:	f000 f830 	bl	8003a1c <_malloc_usable_size_r>
 80039bc:	42a0      	cmp	r0, r4
 80039be:	d20f      	bcs.n	80039e0 <_realloc_r+0x48>
 80039c0:	4621      	mov	r1, r4
 80039c2:	4638      	mov	r0, r7
 80039c4:	f7ff ff8e 	bl	80038e4 <_malloc_r>
 80039c8:	4605      	mov	r5, r0
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d0f2      	beq.n	80039b4 <_realloc_r+0x1c>
 80039ce:	4631      	mov	r1, r6
 80039d0:	4622      	mov	r2, r4
 80039d2:	f7ff ff0f 	bl	80037f4 <memcpy>
 80039d6:	4631      	mov	r1, r6
 80039d8:	4638      	mov	r0, r7
 80039da:	f7ff ff33 	bl	8003844 <_free_r>
 80039de:	e7e9      	b.n	80039b4 <_realloc_r+0x1c>
 80039e0:	4635      	mov	r5, r6
 80039e2:	e7e7      	b.n	80039b4 <_realloc_r+0x1c>

080039e4 <_sbrk_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	4d06      	ldr	r5, [pc, #24]	; (8003a00 <_sbrk_r+0x1c>)
 80039e8:	2300      	movs	r3, #0
 80039ea:	4604      	mov	r4, r0
 80039ec:	4608      	mov	r0, r1
 80039ee:	602b      	str	r3, [r5, #0]
 80039f0:	f7fd fc32 	bl	8001258 <_sbrk>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_sbrk_r+0x1a>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_sbrk_r+0x1a>
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	20000e04 	.word	0x20000e04

08003a04 <__malloc_lock>:
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <__malloc_lock+0x8>)
 8003a06:	f000 b811 	b.w	8003a2c <__retarget_lock_acquire_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	20000e0c 	.word	0x20000e0c

08003a10 <__malloc_unlock>:
 8003a10:	4801      	ldr	r0, [pc, #4]	; (8003a18 <__malloc_unlock+0x8>)
 8003a12:	f000 b80c 	b.w	8003a2e <__retarget_lock_release_recursive>
 8003a16:	bf00      	nop
 8003a18:	20000e0c 	.word	0x20000e0c

08003a1c <_malloc_usable_size_r>:
 8003a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a20:	1f18      	subs	r0, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bfbc      	itt	lt
 8003a26:	580b      	ldrlt	r3, [r1, r0]
 8003a28:	18c0      	addlt	r0, r0, r3
 8003a2a:	4770      	bx	lr

08003a2c <__retarget_lock_acquire_recursive>:
 8003a2c:	4770      	bx	lr

08003a2e <__retarget_lock_release_recursive>:
 8003a2e:	4770      	bx	lr

08003a30 <_init>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr

08003a3c <_fini>:
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	bf00      	nop
 8003a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a42:	bc08      	pop	{r3}
 8003a44:	469e      	mov	lr, r3
 8003a46:	4770      	bx	lr
